needs "compiled_eval.hl";;

let le_nat_def = define
  `le_nat 0 n = T
/\ le_nat (SUC k) 0 = F
/\ le_nat (SUC k) (SUC l) = le_nat k l`;;

let append_def = define
  `append [] (l2:(num)list) = l2
/\ append (CONS x l1) l2 = CONS x (append l1 l2)`;;

let double_def = define `double l = append l l`;;

let triple_def = define `triple l = append l (append l l)`;;

let merge_def = define
  `(merge (CONS h1 t1) (CONS h2 t2) =
    if le_nat h1 h2 then CONS h1 (merge t1 (CONS h2 t2))
    else CONS h2 (merge (CONS h1 t1) t2))
/\ merge [] l2 = l2
/\ merge l1 [] = l1`;;

let _ = define_type "arbin = Lf | Nd num arbin arbin";;

let tree2list_def = define
  `tree2list Lf = []
/\ tree2list (Nd n a1 a2) = CONS n (merge (tree2list a1) (tree2list a2))`;;

let insTree_def = define
  `insTree Lf n = Nd n Lf Lf
/\ insTree (Nd m a1 a2) n =
    if le_nat n m then Nd n a2 (insTree a1 m)
    else Nd m a2 (insTree a1 n)`;;

let list2tree_def = define
  `list2tree [] = Lf
/\ list2tree (CONS n ns) = insTree (list2tree ns) n`;;

let merge_sort_def = define
  `merge_sort l = tree2list (list2tree l)`;;

let db = add_thms (empty_db ()) [
  "le_nat_def", le_nat_def, [];
  "append_def", append_def, [];
  "double_def", double_def, [];
  "triple_def", triple_def, [];
  "merge_def", merge_def, [];
  "tree2list_def", tree2list_def, [];
  "insTree_def", insTree_def, [];
  "list2tree_def", list2tree_def, [];
  "merge_sort_def", merge_sort_def, [];
];;

write_rules_names db "out2.hl" [
  "le_nat"; "append"; "double"; "triple"; "merge";
  "tree2list"; "insTree"; "list2tree"; "merge_sort"
];;

let true_tm = standardize_tm `T`;;
let COND_T = prove(`(if T then (t:A) else e) = t`, REWRITE_TAC[COND_CLAUSES]);;
let COND_F = prove(`(if F then (t:A) else e) = e`, REWRITE_TAC[COND_CLAUSES]);;

let COND_num_list_T = (standardize o INST_TYPE[`:(num)list`, aty]) COND_T and
    COND_num_list_F = (standardize o INST_TYPE[`:(num)list`, aty]) COND_F and
    COND_arbin_T = (standardize o INST_TYPE[`:arbin`, aty]) COND_T and
    COND_arbin_F = (standardize o INST_TYPE[`:arbin`, aty]) COND_F;;

needs "out2.hl";;
needs "test_merge_sort.hl";;

let run_test ?(cbv = true) tm =
  let tm_th = norm tm in
  let tm = rand (concl tm_th) in
  let _ = time f_merge_sort tm in
  let tm' = mk_comb (`merge_sort`, tm) in
  let _ = if cbv then norm0 tm' in
  ();;

(*
f_merge_sort: 0.112s (0.084s)
Eval1:        0.232s
CBV_CONV:     1.844s
*)
run_test `L400`;;

(*
f_merge_sort: 0.412s (0.284s)
Eval1:        0.864s
CBV_CONV:     11.444s
*)
run_test `L1200`;;

(*
f_merge_sort: 0.88s (0.656s)
Eval1:        1.984s
CBV_CONV:     41.464s
*)
run_test `L2400`;;

(*
f_merge_sort: 2.096s (1.472s)
Eval1:        4.38s
CBV_CONV:     -
*)
run_test ~cbv:false `L4800`;;

(*
f_merge_sort: 4.544s (3.288s)
Eval1:        10.404s
CBV_CONV:     -
*)
run_test ~cbv:false `L9600`;;