needs "tame_defs.hl";;
needs "tame_defs_unrolled.hl";;
needs "no_abs_tame_defs.hl";;
loadt "test_tame_support.hl";;

let rules = [
  "APPEND_UNROLL8", APPEND_UNROLL8, [];
  "map_of_DEF", map_of_DEF, [];
  "the_DEF", the_DEF, [];
  "is_none_DEF", is_none_DEF, [];
  "funpow_UNROLL5", funpow_UNROLL5, [];
  "nth_UNROLL15", nth_UNROLL15, [];
  "fold_DEF", fold_DEF, [];
  "rev_ABS1", rev_ABS1, [];
  "rev_NO_ABS", rev_NO_ABS, [];
  "upt_DEF", upt_DEF, [];
  "zip_ALT", zip_ALT, [];
  "null_DEF", null_DEF, [];
  "last_DEF", last_DEF, [];
  "maps_UNROLL7", maps_UNROLL7, [];
  "foldl_DEF", foldl_DEF, [];
  "foldr_ALT", foldr_ALT, [];
  "concat_DEF", concat_DEF, [];
  "filter_DEF", filter_DEF, [];
  "member_DEF", member_DEF, [];
  "rotate1_DEF", rotate1_DEF, [];
  "rotate_ALT", rotate_ALT, [];
  "bool_to_num_DEF", bool_to_num_DEF, [];
  "count_UNROLL7", count_UNROLL7, [];
  "hd_DEF", hd_DEF, [];
  "tl_DEF", tl_DEF, [];
  "list_ex_DEF", list_ex_DEF, [];
  "remdups_DEF", remdups_DEF, [];
  "remove1_DEF", remove1_DEF, [];
  "map_UNROLL11", map_UNROLL11, [];
  "pred_list_UNROLL11", pred_list_UNROLL11, [];
  "replicate_DEF", replicate_DEF, [];
  "gen_length_DEF", gen_length_DEF, [];
  "map_filter_ABS1", map_filter_ABS1, [];
  "map_filter_NO_ABS", map_filter_NO_ABS, [];
  "list_update_DEF", list_update_DEF, [];
  "all_interval_nat_DEF", all_interval_nat_DEF, [];
  "size_list_UNROLL15", size_list_UNROLL15, [];
  "fst_DEF", fst_DEF, [];
  "snd_DEF", snd_DEF, [];
  "mapAt_DEF", mapAt_DEF, [];
  "splitAtRec_DEF", splitAtRec_DEF, [];
  "splitAt_DEF", splitAt_DEF, [];
  "between_ABS1", between_ABS1, [];
  "between_NO_ABS", between_NO_ABS, [];
  "minimall_ABS1", minimall_ABS1, [];
  "minimall_NO_ABS", minimall_NO_ABS, [];
  "replace_DEF", replace_DEF, [];
  "removeKey_ABS1", removeKey_ABS1, [];
  "removeKey_NO_ABS", removeKey_NO_ABS, [];
  "removeKeyList_DEF", removeKeyList_DEF, [];

  "vertices_face_DEF", vertices_face_DEF, [];
  "final_face_DEF", final_face_DEF, [];
  "faceListAt_DEF", faceListAt_DEF, [];
  "facesAt_DEF", facesAt_DEF, [];
  "tri_ABS1", tri_ABS1, [];
  "tri_NO_ABS", tri_NO_ABS, [];
  "quad_ABS1", quad_ABS1, [];
  "quad_NO_ABS", quad_NO_ABS, [];
  "faces_DEF", faces_DEF, [];
  "graph_ALT", graph_ALT, [];
  "degree_DEF", degree_DEF, [];
  "except_ABS1", except_ABS1, [];
  "except_NO_ABS", except_NO_ABS, [];
  "finals_DEF", finals_DEF, [];
  "heights_DEF", heights_DEF, [];
  "height_DEF", height_DEF, [];
  "nextElem_ALT", nextElem_ALT, [];
  "setFinal_DEF", setFinal_DEF, [];
  "nextVertex_ALT", nextVertex_ALT, [];
  "neighbors_ABS1", neighbors_ABS1, [];
  "neighbors_NO_ABS", neighbors_NO_ABS, [];
  "nonFinals_ABS1", nonFinals_ABS1, [];
  "nonFinals_NO_ABS", nonFinals_NO_ABS, [];
  "vertextype_DEF", vertextype_DEF, [];
  "finalVertex_DEF", finalVertex_DEF, [];
  "final_graph_ALT", final_graph_ALT, [];
  "nextVertices_DEF", nextVertices_DEF, [];
  "countVertices_DEF", countVertices_DEF, [];
  "directedLength_DEF", directedLength_DEF, [];
  "vertices_graph_DEF", vertices_graph_DEF, [];

  "tame10_ABS1", tame10_ABS1, [];
  "tame10_NO_ABS", tame10_NO_ABS, [];
  "tame11a_ABS1", tame11a_ABS1, [];
  "tame11a_NO_ABS", tame11a_NO_ABS, [];
  "tame11b_ABS1", tame11b_ABS1, [];
  "tame11b_NO_ABS", tame11b_NO_ABS, [];
  "tame12o_ABS1", tame12o_ABS1, [];
  "tame12o_NO_ABS", tame12o_NO_ABS, [];
  "tame10ub_DEF", tame10ub_DEF, [];
  "excessTCount_DEF", excessTCount_DEF, [];
  "squanderTarget_DEF", squanderTarget_DEF, [];
  "squanderFace_ALT", squanderFace_ALT, [];
  "squanderVertex_ALT2", squanderVertex_ALT2, [];
  "maxGon_DEF", maxGon_DEF, [];
  "seed_DEF", seed_DEF, [];
  "duplicateEdge_DEF", duplicateEdge_DEF, [];
  "containsUnacceptableEdgeSnd_ALT", containsUnacceptableEdgeSnd_ALT, [];
  "containsUnacceptableEdge_ALT", containsUnacceptableEdge_ALT, [];
  "containsDuplicateEdge_ABS1", containsDuplicateEdge_ABS1, [];
  "containsDuplicateEdge_NO_ABS", containsDuplicateEdge_NO_ABS, [];

  "alist_DEF", alist_DEF, [];
  "values_DEF", values_DEF, [];
  "lookup_ALT", lookup_ALT, [];
  "rem_alist_DEF", rem_alist_DEF, [];
  "update_ALT", update_ALT, [];

  "minimalFace_ABS1", minimalFace_ABS1, [];
  "minimalFace_NO_ABS", minimalFace_NO_ABS, [];
  "minimalVertex_DEF", minimalVertex_DEF, [];
  "listSum_DEF", listSum_DEF, [];
  "heightsNewVertices_ABS1", heightsNewVertices_ABS1, [];
  "heightsNewVertices_NO_ABS", heightsNewVertices_NO_ABS, [];
  "replacefacesAt_DEF", replacefacesAt_DEF, [];
  "split_face_NO_ABS", split_face_NO_ABS, [];
  "splitFace_ABS2", splitFace_ABS2, [];
  "splitFace_NO_ABS", splitFace_NO_ABS, [];
  "makeFaceFinalFaceList_DEF", makeFaceFinalFaceList_DEF, [];
  "makeFaceFinal_DEF", makeFaceFinal_DEF, [];
  "subdivFacea_ABS1", subdivFacea_ABS1, [];
  "subdivFacea_NO_ABS", subdivFacea_NO_ABS, [];
  "subdivFace_DEF", subdivFace_DEF, [];

  "enumAppend_ABS1", enumAppend_ABS1, [];
  "enumAppend_ABS2", enumAppend_ABS2, [];
  "enumAppend_NO_ABS", enumAppend_NO_ABS, [];
  "enumBase_ABS2", enumBase_ABS2, [];
  "enumBase_NO_ABS", enumBase_NO_ABS, [];
  "enumerator_ABS2", enumerator_ABS2, [];
  "enumerator_ABS3", enumerator_ABS3, [];
  "enumerator_NO_ABS", enumerator_NO_ABS, [];
  "enum_ALT", enum_ALT, [];

  "hideDupsRec_DEF", hideDupsRec_DEF, [];
  "hideDups_DEF", hideDups_DEF, [];
  "indexToVertexList_ABS1", indexToVertexList_ABS1, [];
  "indexToVertexList_NO_ABS", indexToVertexList_NO_ABS, [];
  "notame_DEF", notame_DEF, [];
  "excessAtType_ALT", excessAtType_ALT, [];
  "excessAt_DEF", excessAt_DEF, [];
  "faceSquanderLowerBound_ABS1", faceSquanderLowerBound_ABS1, [];
  "faceSquanderLowerBound_NO_ABS", faceSquanderLowerBound_NO_ABS, [];
  "deleteAround_ABS1", deleteAround_ABS1, [];
  "deleteAround_ABS2", deleteAround_ABS2, [];
  "deleteAround_NO_ABS", deleteAround_NO_ABS, [];
  
  "excessNotAtRec_ALT", excessNotAtRec_ALT, [];
  "excessTable_ABS1", excessTable_ABS1, [];
  "excessTable_ABS2", excessTable_ABS2, [];
  "excessTable_NO_ABS", excessTable_NO_ABS, [];
  "excessNotAt_ALT", excessNotAt_ALT, [];
  "squanderLowerBound_DEF", squanderLowerBound_DEF, [];
  "polysizes_ABS1", polysizes_ABS1, [];
  "polysizes_ABS2", polysizes_ABS2, [];
  "polysizes_NO_ABS", polysizes_NO_ABS, [];
  "is_tame13a_ALT", is_tame13a_ALT, [];
  "generatePolygonTame_ABS1", generatePolygonTame_ABS1, [];
  "generatePolygonTame_ABS2", generatePolygonTame_ABS2, [];
  "generatePolygonTame_NO_ABS", generatePolygonTame_NO_ABS, [];
  "next_tame0_ABS1", next_tame0_ABS1, [];
  "next_tame0_ABS2", next_tame0_ABS2, [];
  "next_tame0_ABS4", next_tame0_ABS4, [];
  "next_tame0_NO_ABS", next_tame0_NO_ABS, [];
  "is_tame_DEF", is_tame_DEF, [];
  "next_tame_ABS1", next_tame_ABS1, [];
  "next_tame_NO_ABS", next_tame_NO_ABS, [];
  "worklist_tree_aux_DEF", worklist_tree_aux_DEF, [];
  "worklist_tree_ALT", worklist_tree_ALT, [];
  "nof_vertices_ALT", nof_vertices_ALT, [];

  "qsort_DEF", qsort_DEF, [];
  "hash_ALT", hash_ALT, [];
  "fgraph_DEF", fgraph_DEF, [];
  "merge_ALT", merge_ALT, [];
  "compat_DEF", compat_DEF, [];

  "pr_iso_test_rec_ALT", pr_iso_test_rec_ALT, [];
  "pr_iso_test_DEF", pr_iso_test_DEF, [];
  "iso_test_DEF", iso_test_DEF, [];
  "insert_mod_trie_ALT", insert_mod_trie_ALT, [];
  (* "insert_mod2_trie_DEF", insert_mod2_trie_DEF;
  "worklist_tree_coll_aux_trie_ALT", worklist_tree_coll_aux_trie_ALT;
  "worklist_tree_coll_trie_DEF", worklist_tree_coll_trie_DEF;
  "enum_filter_finals_ALT", enum_filter_finals_ALT; *)
  "tameEnumFilter_ALT", tameEnumFilter_ALT, [];

  "worklist_tree_bounded_ALT", worklist_tree_bounded_ALT, [];
  "tameEnumFilterBounded_ABS1", tameEnumFilterBounded_ABS1, [];
  "tameEnumFilterBounded_NO_ABS", tameEnumFilterBounded_NO_ABS, [];
];;

let db = add_thms (tame_default_db ~eliminate_abs:false ()) rules;;
let consts = dependencies db `tameEnumFilterBounded`;;
set_extra_for_consts db Extra_memo [
  (* `bool_to_num`; *)
  `squanderFace`;
  `maxGon`;
  (* `fst:num#num->num`; *)
  (* `is_none:(num#num)option->bool`; *)
  (* `final_face`; *)
  `size_list:(num)list->num`;
  `excessAtType`;
  `squanderVertex`;
  `vertices_face`;
  `heightsNewVertices`;
  `upt`;
  (* `nextElem:(num)list->num->num->num`; *)
  `nextVertex`;
  `rev:(num)list->(num)list`;
  `APPEND:(num)list->(num)list->(num)list`;
  `nextVertices`;
  `member:(num)list->num->bool`;
  `enum`;
  (* `nth:(num)list->num->num`; *)
  (* `faceListAt`; *)
  `splitAtRec:num->(num)list->(num)list->(num)list#(num)list`;
  `map:(num->(num)list)->(num)list->((num)list)list`;
  `map:((num)list->(num)list)->((num)list)list->((num)list)list`;
  (* `filter:(num#num->bool)->(num#num)list->(num#num)list`; *)
  `removeKeyList:(num)list->(num#num)list->(num#num)list`;
  (* `nth:((face)list)list->num->(face)list`; *)
  (* `excessNotAtRec`; *)
];;

let () =
  write_rules_consts db "out.hl" consts;;
loadt "out.hl";;

(* 40.714s *)
(* original: 0.0171s *)
(* ratio: 2381 *)

(* 26.144s with COND instead of AND/OR *)
(* 25.406s with new AND/OR *)
(* 23.614s with size_list_ALT with 15 cases *)
(* 18.631s with custom types (COND, f_EQ still use INST_TYPE) *)
(* 17.927s with custom types (including COND but without f_EQ) *)
(* 17.995s with custom types everywhere *)
(* 14.663s with nth_ALT with 10 cases *)
(* 14.538s with funpow_ALT2 with 5 cases *)
(* 14.487s with maps_ALT, count_ALT, map_ALT, pred_list_ALT *)
(* 9.915s with fast arithmetic *)
(* 9.859s with fast arithmetic + standardize *)
(* 9.797s with APPEND_UNROLL8 *)
(* 9.653s with nth_UNROLL15, maps_UNROLL7, count_UNROLL7 *)
(* 3.319s with NO_ABS *)
(* 2.369s with memos *)
reset_all_counters();;
clear_arg_lists();;
clear_all_memos();;
test 1 (f_tameEnumFilterBounded (numeral `0`)) (numeral `100`);;

get_all_counters();;

(* 12328.756s (not exclusive) *)
test 1 (f_tameEnumFilterBounded (numeral `0`)) (numeral `100000`);;
