(* We need split_thm *)
needs "eval_support.hl";;

(* Regular expressions for transforming names *)
#load "str.cma";;

type arg_type =
  Ttype of hol_type
| Tfun of arg_type list * hol_type;;

type pattern = 
  Pvar of int
| Papp of term * pattern list;;

type extra = Extra_counter | Extra_memo | Extra_arg_list;;

type rewrite_rec = {
  args: pattern list;
  arg_types: arg_type list;
  fv: term list;
  thm_name: string;
  thm_index: int;
  thm: thm;
};;

type db_rec = {
  f_name: string;
  const: term;
  type_inst_const: term option;
  nargs: int;
  mutable extra: extra list;
  mutable rewrites: rewrite_rec list;
};;

type database = Database of (string, (term * db_rec) list) Hashtbl.t;;

let get_type =
  let rec get ty =
    match splitlist dest_fun_ty ty with
    | [], t -> Ttype t
    | tys, t -> Tfun (map get tys, t) in
  fun tm ->
    get (type_of tm);;

let rec get_type_vars t =
  match t with
  | Ttype ty -> tyvars ty
  | Tfun (args, r) -> end_itlist union (tyvars r :: map get_type_vars args);;

let string_of_term_type tm =
  Format.sprintf "%s:%s" (string_of_term tm) (string_of_type (type_of tm));;

let check_arg_form, check_args_form =
  let rec chk t stk free =
    if is_comb t then
      let rator, rand = dest_comb t in
      let free', pat1 = chk rand [] free in
      chk rator (pat1 :: stk) free'
    else if is_var t then
      if stk = [] then
        let newi = List.length free in
        try (free, Pvar (newi - index t free - 1))
        with _ -> (t :: free, Pvar newi)
      else 
        failwith ("check_arg_form: " ^ fst (dest_var t) ^ " occurs as a variable on lhs")
    else if is_const t then
      (free, Papp (t, stk))
    else
      failwith ("check_arg_form: lambda abstraction not allowed on lhs") 
  in
  let check_arg_form tm =
    match chk tm [] [] with
      | (fv, Papp (head, args)) -> (List.rev fv, head, args)
      | _ -> failwith "check_arg_form: ill-formed lhs" in
  let check_args_form tms =
    let fv, args =
      List.fold_right (fun arg (fv, args) ->
        let fv', arg' = chk arg [] fv in
        (fv', arg' :: args)) tms ([], []) in
    List.rev fv, args in
  check_arg_form, check_args_form;;


let fix_name, clear_fixes, add_fix_repl =
  let repls = ref [] in
  let clear () = repls := [] in
  let add_repl str repl =
    let re = Str.regexp_string str in
    repls := List.stable_sort (fun (s1, _, _) (s2, _, _) -> String.length s2 - String.length s1) 
                              ((str, re, repl) :: !repls) in
  let fix name =
    List.fold_left (fun s (_, re, repl) -> Str.global_replace re repl s) name !repls in
  fix, clear, add_repl;;

let variant_name existing name =
  let rec loop n =
    let name' = if n = 0 then name else name ^ string_of_int n in
    if mem name' existing then
      loop (n + 1)
    else
      name' in
  loop 0;;

let fix_identifier str =
  let str' =
    Str.global_replace (Str.regexp "[^a-zA-Z0-9]") "_" str
      |> Str.global_replace (Str.regexp "__+") "_"
      |> Str.global_replace (Str.regexp "^_+\\|_+$") "" in
  if Str.string_match (Str.regexp "[a-z]") str' 0 then str'
  else 
    "id_" ^ str';;

let suffix_of_type const =
  let name, ty = dest_const const in
  let c0 = mk_const (name, []) in
  let inst = type_match (type_of c0) ty [] in
  let tys = map fst inst |> filter (not o is_vartype) in
  String.concat "_" (map string_of_type tys);;

(* Standard names for common symbols *)
let () =
  clear_fixes();
  List.iter (uncurry add_fix_repl) [
    "/\\", "AND";
    "\\/", "OR";
    "==>", "IMP";
    "~", "NOT";
    "+", "ADD";
    "-", "SUB";
    "*", "MUL";
    "/", "DIV";
    "<", "LT";
    ">", "GT";
    "<=", "LE";
    ">=", "GE";
    "=", "EQ";
];;

(* Database functions *)

let empty_db () = Database (Hashtbl.create 100);;

let entries (Database db) = Hashtbl.fold (fun name e r -> (name, e) :: r) db [];;

let has_entries (Database db) name =
  Hashtbl.mem db name;;

let add_entry (Database db) const entry =
  let name, _ = dest_const const in
  let entries = try Hashtbl.find db name with Not_found -> [] in
  Hashtbl.replace db name ((const, entry) :: entries);;

let same_extra e1 e2 =
  match e1, e2 with
  | Extra_counter, Extra_counter -> true
  | Extra_memo, Extra_memo -> true
  | _ -> false;;

let add_extra ls e =
  e :: filter (fun e' -> not (same_extra e e')) ls;;

let find_entries (Database db) const =
  let name, ty = dest_const const in
  let entries = Hashtbl.find db name in
  filter (fun (c, db_rec) -> can (type_match (type_of c) ty) []) entries
    |> map snd;;

let find_most_specific_entry db const =
  let match_length ty1 ty2 =
    type_match ty1 ty2 []
      |> List.filter (fun (a, _) -> is_type a)
      |> List.length in
  try
    let _, ty = dest_const const in
    find_entries db const
      |> List.map (fun e -> match_length (type_of e.const) ty, e)
      |> List.sort (fun (l1, _) (l2, _) -> Pervasives.compare l1 l2)
      |> List.hd |> snd
  with Failure _ | Not_found ->
    failwith (Format.sprintf "find_most_specific_entry: no entries for `%s`"
                (string_of_term_type const));;

let find_exact_entry db const =
  let exact_match ty1 ty2 =
    type_match ty1 ty2 []
      |> List.for_all (fun (a, _) -> is_vartype a) in
  try
    let _, ty = dest_const const in
    find_entries db const
      |> List.find (fun e -> exact_match (type_of e.const) ty)
  with Not_found ->
    failwith (Format.sprintf "find_exact_entry: no entries for `%s`"
                (string_of_term_type const));;

let get_entries (Database db) names =
  map (Hashtbl.find db) names |> flat |> map snd;;

let set_extra_for_consts db extra consts =
  List.map (find_entries db) consts
    |> List.concat
    |> List.iter (fun e -> e.extra <- add_extra e.extra extra);;

let set_extra_for_names db extra names =
  get_entries db names
    |> List.iter (fun (e: db_rec) -> e.extra <- add_extra e.extra extra);;
  
let set_rule db ?name const =
  if can (find_exact_entry db) const then 
    failwith (Format.sprintf "set_rule: duplicate entry for `%s`" 
                (string_of_term_type const));
  let c_name, cty = dest_const const in
  let names = 
    try get_entries db [c_name] |> List.map (fun e -> e.f_name)
    with Not_found -> [] in
  let f_name = variant_name names @@
    match name with
    | None -> ["f"; fix_name c_name; suffix_of_type const]
                |> List.filter (fun s -> s <> "")
                |> String.concat "_"
                |> fix_identifier
    | Some name -> name in
  let nargs =
    match get_type const with
    | Tfun (args, _) -> List.length args
    | _ -> 0 in
  let entry: db_rec = {
    f_name = f_name;
    const = const;
    type_inst_const = None;
    nargs = nargs;
    extra = [];
    rewrites = [];
  } in
  add_entry db const entry;;

let add_thm db ?type_tm (thm_name, index, eq_th) =
  let const, _ = concl eq_th |> dest_eq |> fst |> strip_comb in
  let name, cty = dest_const const in
  let key_const, type_inst = 
    match type_tm with 
    | None -> const, []
    | Some const -> const, type_match cty (type_of const) [] in
  if name <> fst (dest_const key_const) then failwith "add_thm: bad type_tm";
  let th1 = INST_TYPE type_inst eq_th in
  let lhs, rhs = dest_eq (concl th1) in
  let fv, _, arg_pats = check_arg_form lhs in
  let entry =
    try find_exact_entry db key_const
    with Failure _ ->
      let names = 
        try get_entries db [name] |> List.map (fun e -> e.f_name)
        with Not_found -> [] in
      let e = {
        f_name = ["f"; fix_name name; suffix_of_type key_const]
                  |> List.filter (fun s -> s <> "")
                  |> String.concat "_"
                  |> fix_identifier
                  |> variant_name names;
        const = key_const;
        type_inst_const = if key_const = const then None else Some key_const;
        nargs = List.length arg_pats;
        extra = [];
        rewrites = [];
      } in
      add_entry db key_const e; e in
  if entry.nargs <> List.length arg_pats then
    failwith (Format.sprintf "Incorrect number of arguments for '%s' in '%s'" 
                             name (string_of_thm eq_th));
  entry.rewrites <- { 
    args = arg_pats;
    arg_types = map get_type @@ snd (strip_comb lhs);
    fv = fv;
    thm = th1;
    thm_name = thm_name;
    thm_index = index;
  } :: entry.rewrites;;

let add_thms db ths =
  let add (name, th, type_tms) =
    let eqs = split_thm th in
    let add_all type_tm = 
      List.iteri (fun i th -> add_thm db ?type_tm (name, i + 1, th)) eqs in
    match type_tms with
    | [] -> add_all None
    | _ -> List.iter (fun tm -> add_all (Some tm)) type_tms
  in
  List.iter add ths;
  db;;
