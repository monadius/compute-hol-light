#use "tame/tame_ml.hl";;

tameEnumFilterBounded 1 100000;;

#load "unix.cma";;

let test n f a =
  let start = Unix.gettimeofday() in
  let r = f a in
  for i = 2 to n do
    ignore (f a)
  done;
  let finish = Unix.gettimeofday() in
  r, finish -. start;;

(* 16.670 *)
let r, time = test 1 (tameEnumFilterBounded 1) 100000;;

(* 152.273 *)
let r, time = test 1 (tameEnumFilterBounded 1) 1_000_000;;

(* 63.349s *)
(* first tame: 84528 *)
(* counter = 312764 *)
(* ws_size = 96 *)
(* finals = 501 *)
let r, time = test 1 tameEnumFilter 0;;

(* 20591 = 5h 43m 11s (not exclusive) *)
(* first tame: 34311 *)
(* last tame: 54_394_103 *)
(* counter:  134_699_468 *)
(* ws_size = 651 *)
(* finals = 29318 *)
let r, time = test 1 tameEnumFilter 1;;

let r, time = test 1 (count_finals_bounded 1) 10_000_000;;

!counter;;
!ws_size;;
!finals;;

let rec all_trie_values (Trie (v, m)) =
  let vs = match v with None -> [] | Some lst -> lst in
  vs @
    (List.fold_left (@) [] (map (fun (_, x) -> all_trie_values x) m));;

let t1 = all_trie_values (snd r) |> List.length;;

let t1 = all_trie_values (match snd r with Some t -> t)
  |> nth el 1;;

hash t1;;

install_parser ("nat", Nat_arith.parse_nat);;
f_hash;;

0: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '12];
  ['12; '3; '4]; ['12; '4; '5]; ['12; '5; '7]; ['5; '6; '7];
  ['12; '7; '13]; ['13; '7; '8]; ['13; '8; '14]; ['14; '8; '9];
  ['14; '9; '10]; ['14; '10; '11]; ['13; '14; '11]; ['11; '12; '13]]`

1: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '4];
  ['11; '4; '12]; ['12; '4; '5]; ['12; '5; '8]; ['7; '8; '5];
  ['12; '8; '13]; ['5; '6; '7]; ['13; '8; '9]; ['13; '9; '10];
  ['13; '10; '11]; ['11; '12; '13]]`;;

2: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '4];
  ['11; '4; '12]; ['12; '4; '5]; ['12; '5; '7]; ['5; '6; '7];
  ['12; '7; '13]; ['13; '7; '8]; ['13; '8; '9]; ['13; '9; '10];
  ['13; '10; '11]; ['11; '12; '13]]`;

3: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '4];
  ['11; '4; '12]; ['12; '4; '13]; ['13; '4; '5]; ['13; '5; '6];
  ['13; '6; '7]; ['12; '13; '7]; ['12; '7; '8]; ['11; '12; '8];
  ['10; '11; '8]; ['8; '9; '10]]`;

4: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '4];
  ['11; '4; '12]; ['12; '4; '5]; ['12; '5; '7]; ['5; '6; '7];
  ['12; '7; '8]; ['12; '8; '13]; ['13; '8; '9]; ['13; '9; '10];
  ['13; '10; '11]; ['11; '12; '13]]`;

5: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '0]; ['8; '0; '9];
  ['9; '0; '3]; ['9; '3; '10]; ['10; '3; '4]; ['10; '4; '11];
  ['11; '4; '5]; ['11; '5; '12]; ['12; '5; '6]; ['12; '6; '7];
  ['12; '7; '13]; ['13; '7; '8]; ['13; '8; '9]; ['13; '9; '10];
  ['13; '10; '11]; ['11; '12; '13]]`;

6: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '4];
  ['11; '4; '12]; ['12; '4; '5]; ['12; '5; '7]; ['5; '6; '7];
  ['12; '7; '8]; ['11; '12; '8]; ['10; '11; '8]; ['8; '9; '10]]`;

7: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
  ['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '9]; ['9; '1; '0];
  ['9; '0; '10]; ['10; '0; '3]; ['10; '3; '11]; ['11; '3; '4];
  ['11; '4; '12]; ['12; '4; '5]; ['12; '5; '7]; ['5; '6; '7];
  ['12; '7; '8]; ['11; '12; '8]; ['11; '8; '9]; ['9; '10; '11]]`;

8: `[['0; '1; '2]; ['0; '2; '3]; ['3; '2; '4]; ['4; '2; '5]; ['5; '2; '6];
['6; '2; '1]; ['6; '1; '7]; ['7; '1; '8]; ['8; '1; '0]; ['8; '0; '9];
['9; '0; '3]; ['9; '3; '10]; ['10; '3; '4]; ['10; '4; '11];
['11; '4; '5]; ['11; '5; '6]; ['11; '6; '7]; ['11; '7; '12];
['12; '7; '8]; ['12; '8; '9]; ['12; '9; '10]; ['10; '11; '12]]`;

counter;;
ws_size;;

(* cfinals = 501 *)
let _, cfinals = count_finals_bounded 0 400000;;

(* 28.3s *)
let _, tm = test 10 (tameEnumFilterBounded 0) 20000;;

tameEnumFilterBounded 0 84528;;
finals;;
ws_size;;

(* 0.171s *)
let (gs, t), tm = test 10 (tameEnumFilterBounded 0) 100;;
