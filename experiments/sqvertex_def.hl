needs "arith_options.hl";;
Arith_options.base := 10;;
Arith_options.cached := false;;

needs "new_arith/nat_arith.hl";;

let f_SUC a opt = trans_opt opt (Nat_arith.nsuc a);;
let f_PRE a opt = trans_opt opt (Nat_arith.npre a);;
let f_ADD a b opt = trans_opt opt (Nat_arith.nadd a b);;
let f_SUB a b opt = trans_opt opt (Nat_arith.nsub a b);;
let f_MUL a b opt = trans_opt opt (Nat_arith.nmul a b);;
let f_LE tm1 tm2 opt = trans_opt opt (fst (Nat_arith.nle tm1 tm2));;
let f_LT tm1 tm2 opt = trans_opt opt (fst (Nat_arith.nlt tm1 tm2));;
let f_MIN a b opt = trans_opt opt (Nat_arith.nmin a b);;
let f_MAX a b opt = trans_opt opt (Nat_arith.nmax a b);;

let f_EQ_num tm1 tm2 opt = trans_opt opt (fst (Nat_arith.neq tm1 tm2));;

let numeral = Nat_arith.replace_numerals;;
install_user_printer ("nat", Nat_arith.print_nat);;

let squanderTarget_DEF = define
`squanderTarget = 15410`;;

let squanderVertex_DEF = define
`squanderVertex p q =
   (if p = 0 /\ q = 3 then 6177
    else if p = 0 /\ q = 4 then 9696
    else if p = 1 /\ q = 2 then 6557
    else if p = 1 /\ q = 3 then 6176
    else if p = 2 /\ q = 1 then 7967
    else if p = 2 /\ q = 2 then 4116
    else if p = 2 /\ q = 3 then 12846
    else if p = 3 /\ q = 1 then 3106
    else if p = 3 /\ q = 2 then 8165
    else if p = 4 /\ q = 0 then 3466
    else if p = 4 /\ q = 1 then 3655
    else if p = 5 /\ q = 0 then 395
    else if p = 5 /\ q = 1 then 11354
    else if p = 6 /\ q = 0 then 6854
    else if p = 7 /\ q = 0 then 14493
    else squanderTarget)`;;

let squanderVertex_ALT = prove
  (`squanderVertex 0 3 = 6177
    /\ squanderVertex 0 4 = 9696
    /\ squanderVertex 1 2 = 6557
    /\ squanderVertex 1 3 = 6176
    /\ squanderVertex 2 1 = 7967
    /\ squanderVertex 2 2 = 4116
    /\ squanderVertex 2 3 = 12846
    /\ squanderVertex 3 1 = 3106
    /\ squanderVertex 3 2 = 8165
    /\ squanderVertex 4 0 = 3466
    /\ squanderVertex 4 1 = 3655
    /\ squanderVertex 5 0 = 395
    /\ squanderVertex 5 1 = 11354
    /\ squanderVertex 6 0 = 6854
    /\ squanderVertex 7 0 = 14493
    /\ squanderVertex p q = 
      if q = 0 then
        (if p = 4 then 3466
         else if p = 5 then 395
         else if p = 6 then 6854
         else if p = 7 then 14493
         else 15410)
      else if q = 1 then
        (if p = 2 then 7967
         else if p = 3 then 3106
         else if p = 4 then 3655
         else if p = 5 then 11354
         else 15410)
      else if q = 2 then
        (if p = 1 then 6557
         else if p = 2 then 4116
         else if p = 3 then 8165
         else 15410)
      else if q = 3 then
        (if p = 0 then 6177
         else if p = 1 then 6176
         else if p = 2 then 12846
         else 15410)
      else if q = 4 then
        (if p = 0 then 9696
         else 15410)
      else 15410`,
  REWRITE_TAC[squanderVertex_DEF; squanderTarget_DEF; ARITH_EQ] THEN
    REWRITE_TAC[GSYM squanderVertex_DEF; GSYM squanderTarget_DEF] THEN
    REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[squanderVertex_DEF; squanderTarget_DEF] THEN 
    ASM_ARITH_TAC);;

