loadt "eval_compile.hl";;

#load "unix.cma";;

let test n f a =
  let start = Unix.gettimeofday() in
  let r = f a in
  for i = 2 to n do
    ignore (f a)
  done;
  let finish = Unix.gettimeofday() in
  r, finish -. start;;

let d1 = new_definition `d1 f (x:real) = MAP (f x) [1;2;3]`;;
let d3 = new_definition `d3 (f:num->num->num) (x:num) y = MAP (f (SUC x)) [y;2]`;;
let d4 = new_definition `d4 (f:num->num->num) (x:num) y = MAP (f (SUC x)) [SUC y;2]`;;

let d5 = new_definition `d5 (x:num) (g:num->num) = x`;;
let d6 = new_definition `d6 (f:(num->num)->num) = f SUC`;;
let d7 = new_definition `d7 n = d6 (d5 n)`;;

let squanderFace_DEF = define
`squanderFace n =
  (if n = 3
   then 0
   else if n = 4
        then 2058
        else if n = 5 then 4819
             else if n = 6 then 7120 else 15410)`;;

let db = add_thms (empty_db "test") [
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_ADD", ARITH_ADD, [];
  "MAP", MAP, [];
  "ARITH_EQ", ARITH_EQ, [];
  "FILTER", FILTER, [];
  "MEM", MEM, [];
  "ALL", ALL, [];
  "squanderFace_DEF", squanderFace_DEF, [];
  "d1", d1, [];
  "d3", d3, [];
  "d4", d4, [];
  "d5", d5, [];
  "d6", d6, [];
  "d7", d7, [];
];;

let tm = `MAP (CONS 3) [[1];[2];[]]`;;
let tm = `d1 (\x y. x + &y) (&2)`;;
let tm = `d3 (\x y. x + y) 3 4`;;
let tm = `d7 3`;;
let tm = `MAP (CONS 1) [[SUC x]]`;;
let tm = `MAP (\(CONS h t). CONS (SUC h) t) [[1]; [2;3]; [3;4;5]]`;;
let tm = `FILTER ((=) 3) [1;2;3;4;5]`;;
let tm = `squanderFace 4`;;
let tm = `MEM 3 [1;2;3;4]`;;
let tm = `ALL ((=) 3) [3;3;2]`;;
let tm = `squanderVertex 5 1`;;

let consts = dependencies db tm ~inst_types:false;;
let consts = dependencies db tm;;

write_rules_consts db "out2.hl" ~term:tm consts;;
loadt "out2.hl";;

compile_new := true;;
write_rules_consts db "out3.hl" ~term:tm consts;;

test 1000 result ();;
test 1000 result2 ();;

(**************************)

loadt "eval_compile.hl";;

let compile_tm db tm =
  let vars = frees tm in
  let args' = map (fun tm -> (tm, Arg_term), fst (dest_var tm)) vars in
  let args_f = vars
    |> filter (fun tm -> is_fun_ty (type_of tm))
    |> map (fun tm -> (tm, Arg_function), "fun_" ^ fst (dest_var tm)) in
  let args = args' @ args_f in
  let tm_name = "tm" in
  let tree = build_eval_tree db tm |> optimize_eval_tree in
  let _, cmds = get_eval_commands true (map fst args) tree in
  let cmds = optimize_comb tm cmds in
  let _, p_tms = pattern_cmds (map fst args) cmds in
  let p_names =
    let names = map snd args in
    let arg_names = enum_names "a" (length p_tms) in
    zip p_tms (map (name_variant names) arg_names) in
  let p_args = map (fun (tm, name) -> (tm, Arg_term), name) p_names in
  let pat, _ = get_pattern tm p_tms in
  let _, exprs = cmds_to_exprs { empty_env with names = p_args @ args } cmds in
  let expr =
    let body = chain_let exprs in
    if pat = Punused then body
    else
      Match (Raw tm_name, 
        [Raw (string_of_pat p_names pat), None, body;
         Raw "_", None, Raw "failwith \"bad pattern\""]) in
  Format.fprintf Format.std_formatter "@.@[<v>%a@]@.@." print_expr expr;;

compile_tm db `if 2 = 1 then SUC 1 else if 2 = 1 then 1 else SUC 2`;;
compile_tm db `(2 = 1 \/ 2 = 2) \/ 2 = SUC 2`;;

let tm = `if (if 2 = 1 then SUC 3 = 4 else F) then (SUC 1) else 2`;;
compile_tm db tm;;

compile_tm db `1 + SUC 1`;;
compile_tm db `MAP ((+) (SUC 1)) []`;;
compile_tm db `MAP (MAP SUC) []`;;
compile_tm db `MAP (CONS 1) []`;;
compile_tm db `MAP (CONS 1) [[SUC x]]`;;
compile_tm db `MAP (CONS (SUC 3)) []`;;
compile_tm db `d6 (d5 (SUC n))`;;
compile_tm db `MAP f [f 1]`;;
compile_tm db `MAP f`;;
compile_tm db `d5 (SUC 1) SUC`;;
compile_tm db `MAP (CONS (f:num->num)) []`;;


let db2 = add_thms (empty_db "test") [
  "list_update_DEF", list_update_DEF, [];
  "mapAt_DEF", mapAt_DEF, [];
  "nth_DEF", nth_DEF, [];
];;
compile_tm db2 `mapAt ns f (list_update asa n (f (nth asa n)))`;;

let tm_name = "tm";;

let tm = `f x + f (x:num)`;;
let tm = `SUC (f (r1:num)) + SUC r1`;;
let tm = `f (f (x:num))`;;
let tm = `MAP SUC [x]`;;
let tm = `mapAt ns f (list_update asa n (f (nth asa n)))`;;

let tree = build_eval_tree db tm |> optimize_eval_tree;;
let env, cmds = get_eval_commands [] tree;;
let _, p_tms = pattern_cmds [`x:num`, Arg_term] cmds;;

(* let compile_tree args (tm, tm_name, tree) = *)
let args = map (fun tm, name -> (tm, Arg_term), name) [`r1:num`, "r1"; `x:num`, "x"];;

let _, cmds = get_eval_commands [] tree;;
let _, p_tms = pattern_cmds (map fst args) cmds;;
let p_names =
  let names = map snd args in
  let arg_names = enum_names "a" (length p_tms) in
  zip p_tms (map (name_variant names) arg_names);;
let p_args = map (fun (tm, name) -> (tm, Arg_term), name) p_names;;
let pat, _ = get_pattern tm p_tms;;
let _, exprs = cmds_to_exprs { empty_env with names = p_args @ args } cmds;;
let expr =
  let body = chain_let exprs in
  if pat = Punused then body
  else
    Match (Raw tm_name, 
      [Raw (string_of_pat p_names pat), body;
       Raw "_", Raw "failwith \"bad pattern\""]);;
Format.fprintf Format.std_formatter "@.@[<v>%a@]@." print_expr expr;;

let p1, tms = get_pattern `MAP (\a. (f:num->num) (a + b)) [1;2;3]` [`f:num->num`; `a:num`; `a + b`; `b:num`];;
let p1, tms = get_pattern `(\a. (f:num->num) (a + b))` [`f:num->num`; `a:num`; `a + b`; `b:num`];;

string_of_pat p1;;



let SUC_ALT = prove
  (`SUC (NUMERAL n) = NUMERAL (SUC n) /\
    SUC _0 = BIT1 _0 /\
    SUC (BIT0 n) = BIT1 n /\
    SUC (BIT1 _0) = BIT0 (BIT1 _0) /\
    SUC (BIT1 (BIT0 n)) = BIT0 (BIT1 n) /\
    SUC (BIT1 (BIT1 _0)) = BIT0 (BIT0 (BIT1 _0)) /\
    SUC (BIT1 (BIT1 (BIT0 n))) = BIT0 (BIT0 (BIT1 n)) /\
    SUC (BIT1 (BIT1 (BIT1 n))) = BIT0 (BIT0 (BIT0 (SUC n)))`,
  REWRITE_TAC[ARITH_SUC]);;


let db = add_thms (empty_db "test") [
  "SUC_ALT", SUC_ALT, [];
];;

let tm = `SUC 100`;;

let consts = dependencies db tm;;
compile_new := true;;
write_rules_consts db "out3.hl" ~term:tm consts;;


test 100000 NUM_SUC_CONV `SUC 255`;;
test 100000 f_SUC `255`;;

test 100000 NUM_SUC_CONV `SUC 254`;;
test 100000 f_SUC `254`;;

test 100000 NUM_SUC_CONV `SUC 257`;;
test 100000 f_SUC `257`;;

(*******************************)

let fact_acc = define
  `fact 0 a = a /\ fact (SUC n) a = fact n (SUC n * a)`;;

let fact = prove
  (`fact n a = if n = 0 then a else fact (PRE n) (n * a)`,
  DISJ_CASES_TAC (SPEC `n:num` num_CASES) THEN ASM_REWRITE_TAC[fact_acc] THEN
    POP_ASSUM STRIP_ASSUME_TAC THEN 
    ASM_REWRITE_TAC[fact_acc; NOT_SUC; PRE]);;

let db = add_thms (empty_db "fact") [
  "ARITH_EQ", ARITH_EQ, [];
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_PRE", ARITH_PRE, [];
  "ARITH_ADD", ARITH_ADD, [];
  "ARITH_MULT", ARITH_MULT, [];
  "fact", fact, [];
];;

let trans_counter = ref 0;;
let TRANS th1 th2 =
  incr trans_counter;
  TRANS th1 th2;;

let tm = `fact 10 1`;;
let consts = dependencies db tm;;
compile_tail_rec := false;;
compile_tail_rec := true;;
write_rules_consts db "out3.hl" ~term:tm consts;;
loadt "out3.hl";;

trans_counter := 0;;
f_fact `100` `1` None;;
f_fact `100` `1`;;
(* tail_rec: 81928 *)
(* 81731 *)
trans_counter;;

trans_counter := 0;;
f_MUL `100024245912375` `12470157305732` None;;
(* tail_rec: 1868 *)
(* 1868 *)
trans_counter;;

f_fact `11` `1` None;;
f_fact `11` `1` (Some (mk_fthm ([], `3 = fact 11 1`)));;
f_ADD `100` `100` None;;
f_SUC `99` None;;


(************************)

loadt "eval_compile.hl";;

let def3 = define `def3 a b c = (a = b /\ b = c)`;;
let def33 = prove(`def3 a a a = T`, REWRITE_TAC[def3]);;

let eq_th = EQT_INTRO (SPEC_ALL EQ_REFL);;
let db3 = add_thms (empty_db "test") [
  "eq_th", eq_th, [];
  "AND_CLAUSES", AND_CLAUSES, [];
  "ARITH_EQ", ARITH_EQ, [];
  "def33", def33, [];
  "def3", def3, [];
];;

let tm = `def3 1 2 3`;;
let consts = dependencies db3 tm;;
write_rules_consts db3 "out2.hl" consts;;

(************************)

let NOT_CLAUSES' = prove(`~T = F /\ ~F = T`, REWRITE_TAC[]);;

let EQ_LIST = prove
  (`(xs:(A)list = xs <=> T) /\
    ([] = CONS x xs <=> F) /\
    (CONS x xs = [] <=> F) /\
    (CONS x xs = CONS y ys <=> x = y /\ xs = ys)`,
  REWRITE_TAC[injectivity "list"; distinctness "list"]);;

let EQ_PAIR = prove
  (`(xy:(A#B) = xy <=> T) /\
    ((x:A, y:B) = (a, b) <=> x = a /\ y = b)`,
  REWRITE_TAC[PAIR_EQ]);;

let EQ_TRIPLE = prove
  (`(xyz:(A#B#C) = xyz <=> T) /\
    ((x:A, y:B, z:C) = (a, b, c) <=> x = a /\ y = b /\ z = c)`,
  REWRITE_TAC[PAIR_EQ]);;

let EQ_FACE = prove
  (`(f:face = f <=> T) /\
    (Face xs Final = Face ys Final <=> xs = ys) /\
    (Face xs Nonfinal = Face ys Nonfinal <=> xs = ys) /\
    (Face xs Final = Face ys Nonfinal <=> F) /\
    (Face xs Nonfinal = Face ys Final <=> F)`,
  REWRITE_TAC[injectivity "face"; distinctness "facetype"]);;

let EQ_BOOL = prove
  (`(T = T <=> T) /\
    (F = F <=> T) /\
    (T = F <=> F) /\
    (F = T <=> F)`,
  REWRITE_TAC[]);;

let db =
  let db = empty_db "eq" in
  (* set_rule db `(=):num->num->bool`; *)
  add_thms db [
    "ARITH_EQ", ARITH_EQ, [];
    "NOT_CLAUSES'", NOT_CLAUSES', [];
    "EQ_BOOL", EQ_BOOL, [];
    "EQ_PAIR", EQ_PAIR, [];
    "EQ_LIST", EQ_LIST, [];
    "EQ_FACE", EQ_FACE, [];
  ];;

let tm = `[~T, F] = [F, F]`;;
let consts = dependencies db tm;;

write_rules_consts db "out2.hl" consts ~term:tm;;
loadt "out2.hl";;


(***************************)

let long = define
  `long n = if n = 1000000 then 1 else long (SUC n)`;;

loadt "eval_compile.hl";;

let db = add_thms (empty_db "rec") [
  "ARITH_EQ", ARITH_EQ, [];
  "ARITH_SUC", ARITH_SUC, [];
  "long", long, [];
];;
set_extra_for_names db (Extra_counter 1000) ["long"];;

let tm = `long 0`;;
let consts = dependencies db tm;;
compile_tail_rec := true;;
write_rules_consts db "out2.hl" consts;;
loadt "out2.hl";;

reset_all_counters();;
f_long `0` None;;

compile_tail_rec := false;;
write_rules_consts db "out2.hl" consts;;
loadt "out2.hl";;

reset_all_counters();;
(* stack overflow after ~800,000 *)
f_long `0`;;

