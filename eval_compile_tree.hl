needs "eval_database.hl";;
needs "eval_expr.hl";;

let rec split_while p = function
  | [] -> [], []
  | (x :: xs) as l -> 
    if p x then
      let a, b = split_while p xs in
      x :: a, b
    else
      [], l;;

let is_fun_ty = can dest_fun_ty;;


type eval_arg_type = Arg_term | Arg_theorem | Arg_function;;

type app_type = 
    Basic_app of term 
  | Const_app of db_rec 
  | Var_app of term
  | Abs_app of term * eval_tree

and func_app_rec = {
  app_term: term;
  app_type: app_type;
  applied_args: eval_tree list;
  extra_args: eval_arg_type list;
  (* Arguments for free variables inside abstractions *)
  fixed_args: term list;
}

and eval_tree =
    Refl of term
  | Func_app of func_app_rec;;

let get_eval_type = function
  | Refl _ -> Arg_term
  | Func_app {extra_args = []} -> Arg_theorem
  | Func_app {extra_args = _ :: _} -> Arg_function;;

let get_eval_term = function
  | Refl tm -> tm
  | Func_app { app_term = tm } -> tm;;

let is_eval_tree_refl = function
  | Refl _ -> true
  | _ -> false;;

let is_basic_app = function
  | Func_app {app_type = Basic_app _} -> true
  | _ -> false;;

let build_eval_tree db =
  let rec mk_app tm head args =
    let app_type =
      match head with
      | _ when is_gabs head -> 
        let _, body = strip_gabs head in
        Abs_app (head, build body)
      | Var _ -> Var_app head
      | Const (name, _) -> begin
          if has_entries db name then
            Const_app (find_most_specific_entry db head)
          else
            Basic_app head
        end
      | _ -> invalid_arg "mk_app: head should be a variable, a constant, or an abstraction" in
    match get_type head with
    | Tfun (l, _) ->
      let _, extra = chop_list (List.length args) l in
      let tys = List.map (function Tfun _ -> Arg_function | Ttype _ -> Arg_term) extra in
      Func_app {
        app_term = tm; 
        app_type = app_type; 
        applied_args = args; 
        extra_args = tys; 
        fixed_args = []
      }
    | _ -> invalid_arg "mk_app: head should be a function"
  and build tm =
    match tm with
    | Comb _ ->
      let op, args = strip_comb_gabs tm in
      let arg_trees = List.map build args in
      mk_app tm op arg_trees
    | _ -> (try mk_app tm tm [] with Invalid_argument _ -> Refl tm)
  in
  build;;

let optimize_eval_tree =
  let split_args head args =
    let refls, rest = split_while is_eval_tree_refl args in
    let head' = List.fold_left (curry mk_comb) head 
                  (List.map get_eval_term refls) in
    head', rest in
  let rec optimize = function
    | Refl _ as t -> t
    | Func_app ({app_type = Basic_app head; applied_args = args} as app) ->
      let head', args' = split_args head (List.map optimize args) in
      if args' = [] && app.extra_args = [] && app.fixed_args = [] then
        Refl head'
      else
        Func_app {app with app_type = Basic_app head'; applied_args = args'}
    | Func_app ({app_type = t; applied_args = args} as app) ->
      let t' = match t with Abs_app (tm, body) -> Abs_app (tm, optimize body) | _ -> t in
      Func_app {app with app_type = t'; applied_args = List.map optimize args} in
  optimize;;


type pat = 
  | Punused
  | Pv of term
  (* lhs, rhs, optional "as" clause *)
  | Pcomb of pat * pat * term option
  | Pabs of pat * term option;;

let string_of_pat names =
  let name tm = assocd tm names (string_of_term tm) in
  let rec comb_str t p1 p2 p_as =
    match p_as with
    | Some tm -> sprintf "(%s (%s, %s) as %s)" t (str p1) (str p2) (name tm)
    | None -> sprintf "%s (%s, %s)" t (str p1) (str p2)
  and str = function
  | Punused -> "_"
  | Pv tm -> name tm
  | Pcomb (p1, p2, p_as) -> comb_str "Comb" p1 p2 p_as
  | Pabs (p, p_as) -> comb_str "Abs" Punused p p_as
  in
  str;;

(* Returns 1) a pattern for tm which matches terms in tms, 
           2) a list of unmatched terms in tms *)
let get_pattern =
  let rec subsets s =
    match s with
    | [] -> [[], []]
    | x :: xs ->
      let ss = subsets xs in
      List.fold_left (fun r (a, b) -> (a, x :: b) :: (x :: a, b) :: r) [] ss
  in
  let rec simplify pat =
    match pat with
    | Pv _ | Punused -> pat
    | Pabs (p, p_as) ->
      let p' = simplify p in
      (match p', p_as with
       | Punused, None -> Punused
       | Punused, Some tm -> Pv tm
       | _ -> Pabs (p', p_as))
    | Pcomb (p1, p2, p_as) ->
      let p1 = simplify p1 in
      let p2 = simplify p2 in
      match p1, p2, p_as with
      | Punused, Punused, None -> Punused
      | Punused, Punused, Some tm -> Pv tm
      | _ -> Pcomb (p1, p2, p_as)
  in
  let rec complexity = function
    | Punused | Pv _ -> 0
    | Pabs (p, _) -> complexity p + 1
    | Pcomb (p1, p2, _) -> complexity p1 + complexity p2 + 1
  in
  let rec pattern tm tms =
    match tm with
    | _ when tms = [] -> Punused, []
    | Var _ | Const _ ->
      if mem tm tms then Pv tm, subtract tms [tm]
      else Punused, tms
    | Abs (var, btm) ->
      let p_as, tms =
        if mem tm tms then Some tm, subtract tms [tm]
        else None, tms in
      let tms' = filter (fun tm -> free_in tm btm && not (vfree_in var tm)) tms in
      let p1, _ = pattern btm tms' in
      Pabs (p1, p_as), subtract tms tms'
    | Comb (ltm, rtm) ->
      let p_as, tms =
        if mem tm tms then Some tm, subtract tms [tm]
        else None, tms in
      let ltms = filter (fun tm -> free_in tm ltm) tms and
          rtms = filter (fun tm -> free_in tm rtm) tms in
      let ctms = intersect ltms rtms in
      let ltms' = subtract ltms ctms and
          rtms' = subtract rtms ctms in
      let select_best (best, best_c) (s1, s2) =
        let p1 = pattern ltm (s1 @ ltms') |> fst |> simplify in
        let p2 = pattern rtm (s2 @ rtms') |> fst |> simplify in
        let c = complexity p1 + complexity p2 in
        if best_c < 0 || c < best_c then (p1, p2), c else best, best_c in
      let (p1, p2), _ = List.fold_left select_best ((Punused, Punused), -1) (subsets ctms) in
      Pcomb (p1, p2, p_as), subtract tms (union ltms rtms)
  in
  fun tm tms ->
    let pat, tms' = pattern tm tms in
    simplify pat, tms';;
    

type eval_cmd = Cmd of eval_cmd_type * eval_cmd_rec

and eval_cmd_rec = {
  result: term;
  result_type: eval_arg_type;
}

and eval_cmd_type = 
  | Cmd_ref
  | Cmd_app of app_type * eval_cmd list
  | Cmd_lambda of (term * eval_arg_type) list * eval_cmd
  | Cmd_pair of eval_cmd * eval_cmd
  | Cmd_comb of eval_cmd * eval_cmd
  | Cmd_comb_terms of eval_cmd * eval_cmd
  | Cmd_trans of eval_cmd * eval_cmd
  | Cmd_convert of eval_arg_type * eval_arg_type * eval_cmd
  | Cmd_composite of eval_cmd list;;

let mk_cmd (t, res, res_type) = 
  Cmd (t, { result = res; result_type = res_type });;

let mk_convert_cmd (target, (Cmd (_, r) as cmd))= 
  mk_cmd (Cmd_convert (target, r.result_type, cmd), r.result, target);;

let mk_ref_cmd0 (tm, ty) = mk_cmd (Cmd_ref, tm, ty);;

let mk_ref_cmd (Cmd (_, r)) = mk_cmd (Cmd_ref, r.result, r.result_type);;

let get_cmd_rec (Cmd (_, r)) = r;;

let cmd_type (Cmd (_, r)) = r.result_type;;

let cmd_result (Cmd (_, {result = r})) = r;;


let get_eval_commands =
  let convert_ref target (tm, ty) =
    let rf = mk_ref_cmd0 (tm, ty) in
    if ty = target then rf
    else mk_convert_cmd (target, rf)
  in
  let comb op_tm args =
    List.fold_left (fun (op, op_tm) (arg_tm, arg_ty) ->
      let arg_cmd = convert_ref Arg_theorem (arg_tm, arg_ty) in
      let tm = mk_comb (op_tm, arg_tm) in
        mk_cmd (Cmd_comb (op, arg_cmd), tm, Arg_theorem), tm)
      (convert_ref Arg_theorem (op_tm, Arg_term), op_tm) args 
    |> fst
  in
  let get_args f =
    let mk_tm i ty =
      let name = string_of_int (i + 1) in
      mk_var (name, ty) in
    let args = map (fun arg -> get_eval_term arg, get_eval_type arg) f.applied_args in
    let fixed = map (fun tm -> tm, Arg_term) f.fixed_args in
    let tys, _ = splitlist dest_fun_ty (type_of f.app_term) in
    let extra = zip (List.mapi mk_tm tys) f.extra_args in
    fixed @ args, extra
  in
  let rec commands env tree =
    match tree with
    | Refl _ -> env, []
    | Func_app { app_term = tm; extra_args = [] } 
        when mem (tm, Arg_theorem) env -> env, []
    | Func_app { app_term = tm } 
        when mem (tm, Arg_function) env -> env, []
    | Func_app f ->
      let env, cmds = 
        List.fold_left (fun (env, cmds) arg -> 
          let env', cmds' = commands env arg in
          env', cmds @ cmds') 
          (env, []) f.applied_args in
      let args, extra_args = get_args f in
      let cmd =
        match f.app_type with
        | Abs_app _ -> failwith "Abs_app is not allowed"
        | Basic_app op ->
          let cmd = comb op (args @ extra_args) in
          if extra_args = [] then cmd
          else
            let cmd = mk_cmd (Cmd_lambda (extra_args, cmd), f.app_term, Arg_function) in
            mk_cmd (Cmd_pair (mk_ref_cmd0 (f.app_term, Arg_term), cmd), f.app_term, Arg_function)
        | Const_app _ | Var_app _ ->
          let simple_app = forall (fun (_, ty) -> ty <> Arg_theorem) args in
          let extra_args = if simple_app then [] else extra_args in
          let args = args @ extra_args in
          let arg_cmds = map (fun (tm, ty) ->
            let target = if ty = Arg_function then Arg_function else Arg_term in
            convert_ref target (tm, ty)) args in
          let app_cmd = mk_cmd (Cmd_app (f.app_type, arg_cmds), f.app_term, Arg_theorem) in
          let cmd =
            if simple_app then app_cmd
            else
              let op, _ = strip_comb_gabs f.app_term in
              let c = comb op args in
              let t = mk_cmd (Cmd_trans (c, mk_ref_cmd app_cmd), f.app_term, Arg_theorem) in
              mk_cmd (Cmd_composite [app_cmd; t], f.app_term, Arg_theorem) in
          if f.extra_args = [] then cmd
          else
            let cmd = 
              if simple_app then cmd 
              else mk_cmd (Cmd_lambda (extra_args, cmd), f.app_term, Arg_function) in
            mk_cmd (Cmd_pair (mk_ref_cmd0 (f.app_term, Arg_term), cmd), f.app_term, Arg_function)
      in
      let r = get_cmd_rec cmd in
      (r.result, r.result_type) :: env, cmds @ [cmd]
  in
  commands;;


let optimize_comb tm =
  let contains t = can (find_term ((=) t)) tm in
  let rec optimize_cmd (Cmd (t, r)) =
    let t' =
      match t with
      | Cmd_ref -> t
      | Cmd_app (f, args) -> Cmd_app (f, map optimize_cmd args)
      | Cmd_lambda (tms, a) -> Cmd_lambda (tms, optimize_cmd a)
      | Cmd_pair (a1, a2) -> Cmd_pair (optimize_cmd a1, optimize_cmd a2)
      | Cmd_trans (a1, a2) -> Cmd_trans (optimize_cmd a1, optimize_cmd a2)
      | Cmd_comb_terms (a1, a2) -> Cmd_comb_terms (optimize_cmd a1, optimize_cmd a2)
      | Cmd_convert (target, ty, a) -> 
        (match target, ty with
         | Arg_theorem, Arg_function when contains r.result ->
           Cmd_convert (Arg_theorem, Arg_term, mk_ref_cmd0 (r.result, Arg_term))
         | _ -> Cmd_convert (target, ty, optimize_cmd a))
      | Cmd_composite cmds -> Cmd_composite (map optimize_cmd cmds)
      | Cmd_comb (a1, a2) ->
        let a1 = optimize_cmd a1 in
        let a2 = optimize_cmd a2 in
        match a1, a2 with
        | Cmd (Cmd_convert (Arg_theorem, (Arg_term | Arg_function), c1), r1),
          Cmd (Cmd_convert (Arg_theorem, (Arg_term | Arg_function), c2), r2) ->
          if contains r.result then
            Cmd_convert (Arg_theorem, Arg_term, mk_ref_cmd0 (r.result, Arg_term))
          else
            let cmd1 = mk_convert_cmd (Arg_term, c1) in
            let cmd2 = mk_convert_cmd (Arg_term, c2) in
            let cmd = Cmd (Cmd_comb_terms (cmd1, cmd2), { r with result_type = Arg_term }) in
            Cmd_convert (Arg_theorem, Arg_term, cmd)
        | _ -> Cmd_comb (a1, a2) in
    Cmd (t', r) in
  map optimize_cmd;;


(* TODO: env is static: only Arg_theorem and Arg_function can be added to it *)
let rec pattern_cmd env (Cmd (t, r)) =
  let process_args env args =
    List.fold_left (fun tms cmd ->
      let tms' = pattern_cmd env cmd in
      union tms tms') [] args
  in
  match t with
  | Cmd_ref ->
    if r.result_type = Arg_term && not (mem (r.result, Arg_term) env) then [r.result] 
    else []
  | Cmd_app (_, args) -> process_args env args
  | Cmd_lambda (tms, a1) -> process_args (tms @ env) [a1]
  | Cmd_pair (a1, a2) -> process_args env [a1; a2]
  | Cmd_comb (a1, a2) -> process_args env [a1; a2]
  | Cmd_comb_terms (a1, a2) -> process_args env [a1; a2]
  | Cmd_trans (a1, a2) -> process_args env [a1; a2]
  | Cmd_convert (_, _, a1) -> process_args env [a1]
  | Cmd_composite cmds -> snd (pattern_cmds env cmds)

and pattern_cmds env = function
  | [] -> env, []
  | cmd :: cmds ->
    let tms1 = pattern_cmd env cmd in
    let env = (cmd_result cmd, cmd_type cmd) :: env in
    let env, tms2 = pattern_cmds env cmds in
    env, union tms1 tms2;;


type env_rec = {
  names: ((term * eval_arg_type) * string) list;
  index: int;
};;

let empty_env = {names = []; index = 0};;

let rec name_variant names name =
  if mem name names then name_variant names (name ^ "'")
  else name;;

let get_name env (tm, ty) =
  try assoc (tm, ty) env.names
  with Failure _ ->
    Format.sprintf "arg`%s`" (string_of_term tm);;

let extend_env env (tm, ty) =
  let rec check_name name =
    if can (rev_assoc name) env.names then
      check_name (name ^ "'")
    else
      name in
  let i = env.index + 1 in
  let name = check_name (Format.sprintf "r%d" i) in {
    names = ((tm, ty), name) :: env.names;
    index = i;
  }, name;;


let rec cmds_to_exprs env = function
  | [] -> env, []
  | cmd :: cmds ->
    let expr = cmd_expr env cmd in
    let env, name = extend_env env (cmd_result cmd, cmd_type cmd) in
    let env, exprs = cmds_to_exprs env cmds in
    if exprs = [] then env, [expr]
    else
      env, mk_let (name, expr) :: exprs

and cmd_expr env (Cmd (t, r)) =
  match t with
  | Cmd_ref -> Raw (get_name env (r.result, r.result_type))
  | Cmd_app (app, args) ->
    let f_name =
      match app with
      | Var_app tm -> "func_" ^ get_name env (tm, Arg_term)
      | Const_app rule -> rule.f_name
      | _ -> failwith "cmd_exp: Cmd_app" in
    mk_app (mk_raw f_name, map (cmd_expr env) args)
  | Cmd_lambda (tms, a1) ->
    let names =
      enum_names "tm" (length tms)
      |> map (name_variant (map snd env.names)) in
    let env' = { env with names = zip tms names @ env.names } in
    let body = cmd_expr env' a1 in
    Lambda (map mk_raw names, body)
  | Cmd_pair (a1, a2) ->
    mk_tuple (map (cmd_expr env) [a1; a2])
  | Cmd_trans (a1, a2) ->
    mk_app (mk_raw "TRANS", map (cmd_expr env) [a1; a2])
  | Cmd_comb (a1, a2) ->
    App (mk_raw "MK_COMB", mk_tuple (map (cmd_expr env) [a1; a2]))
  | Cmd_comb_terms (a1, a2) ->
    App (mk_raw "mk_comb", mk_tuple (map (cmd_expr env) [a1; a2]))
  | Cmd_convert (target, source, a) ->
      let arg = cmd_expr env a in
      let expr =
        match (target, source) with
        | t1, t2 when t1 = t2 -> arg
        | Arg_term, Arg_function -> App (Raw "fst", arg)
        | Arg_term, Arg_theorem -> App (Raw "rand", App (Raw "concl", arg))
        | Arg_theorem, Arg_term -> App (Raw "REFL", arg)
        | Arg_theorem, Arg_function -> App (Raw "REFL", App (Raw "fst", arg))
        | Arg_function, Arg_term -> App (Raw "to_func", arg)
        | _ -> failwith "Cmd_convert: unsupported conversion" in
      expr
  | Cmd_composite cmds ->
    let _, exprs = cmds_to_exprs env cmds in
    chain_let exprs;;


type compile_env = {
  cond_names: (hol_type * string) list;
  (* name + global flag (for variables) *)
  tm_names: (term * (string * bool)) list;
};;

let compile_eval_tree_new compile_env tm_name (base_tm, tree) =
  let args' = map (fun (tm, (name, _)) -> (tm, Arg_term), name) compile_env.tm_names in
  (* TODO: use tm arguments here instead of fun_f *)
  (* let args_f = compile_env.tm_names
    |> filter (fun (tm, _) -> is_fun_ty (type_of tm))
    |> map (fun (tm, (name, _)) -> (tm, Arg_function), "fun_" ^ name) in
  let args = args' @ args_f in *)
  let args = args' in
  let _, cmds = get_eval_commands (map fst args) tree in
  let cmds = optimize_comb base_tm cmds in
  let _, p_tms = pattern_cmds (map fst args) cmds in
  let p_names =
    let names = map snd args in
    let arg_names = enum_names "a" (length p_tms) in
    zip p_tms (map (name_variant names) arg_names) in
  let p_args = map (fun (tm, name) -> (tm, Arg_term), name) p_names in
  let pat, _ = get_pattern base_tm p_tms in
  let _, exprs = cmds_to_exprs { empty_env with names = p_args @ args } cmds in
  let expr =
    let body = chain_let exprs in
    if pat = Punused then body
    else
      Match (Raw tm_name, 
        [Raw (string_of_pat p_names pat), body;
         Raw "_", Raw "failwith \"bad pattern\""]) in
  expr;;
