#load "unix.cma";;

let test n f a =
  let start = Unix.gettimeofday() in
  let r = f a in
  for i = 2 to n do
    ignore (f a)
  done;
  let finish = Unix.gettimeofday() in
  r, finish -. start;;

let reset_test_results, 
    test_results, 
    time_results, 
    formatted_results, 
    report_result =
  let results = ref [] in
  let passed = ref 0 in
  let failed = ref 0 in
  let report name time b =
    incr (if b then passed else failed);
    results := (name, time, b) :: !results in
  let clear () =
    results := [];
    passed := 0;
    failed := 0 in
  let get () =
    !passed, !failed, !passed + !failed in
  let all () =
    !results in
  let formatted () =
    Format.sprintf "PASSED: %d/%d, FAILED: %d" 
      !passed (!passed + !failed) !failed in
  clear, get, all, formatted, report;;

let assert_true ?(name = "assert_true") ?(n = 1) bool_f arg =
  try
    let result, time = test n bool_f arg in
    report_result name time result;
    result, time, result
  with e -> 
    report_result name (-1.0) false;
    raise e;;

let assert_eq ?(name = "assert_eq") ?(n = 1) f arg v =
  try
    let result, time = test n f arg in
    let passed = (result = v) in
    report_result name time passed;
    result, time, passed
  with e ->
    report_result name (-1.0) false;
    raise e;;

let assert_rhs ?(name = "assert_rhs") ?(n = 1) thm_f arg tm =
  try
    let result, time = test n thm_f arg in
    let passed = result |> concl |> dest_eq |> snd = tm in
    report_result name time passed;
    result, time, passed 
  with e -> 
    report_result name (-1.0) false;
    raise e;;

let assert_exception ?(name = "assert_exception") ?(n = 1) f arg =
  try
    let result, time = test n f arg in
    report_result name time false;
    false, time, false
  with _ ->
    report_result name (-1.0) true;
    true, -1.0, true;;

let assert_noexception ?(name = "assert_noexception") ?(n = 1) f arg =
  try
    let result, time = test n f arg in
    report_result name time true;
    result, time, true
  with e ->
    report_result name (-1.0) false;
    raise e;;