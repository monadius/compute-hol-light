needs "tests/common.hl";;
needs "eval_compile.hl";;

reset_test_results();;

(* Test db 0 *)

let db = add_thms (empty_db "test0") [
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_GE", ARITH_GE, [];
  "ARITH_GT", ARITH_GT, [];
  "FILTER", FILTER, [];
];;

let tm = `FILTER (\x. x > 2) [1;2;3;4]`;;
let consts = dependencies db tm ~inst_types:false;;
map (map (fun c -> c, type_of c)) consts;;
write_rules_consts db "tests/out.hl" consts ~term:tm;;

loadt "tests/out.hl";;
assert_rhs (fun () -> result) () `[3; 4]`;;

(* Test db *)

let d1 = new_definition `d1 x = FILTER (\x. (\x y. x) x 2 > 3) [x;2;3]`;;
let d2 = new_definition 
  `d2 a b = match (a, b) with
    | (1, 2) -> (\x y. x) a b
    | (3, 4) -> (\x. x + b) (a + b)`;;
let d3 = new_definition
  `d3 a b = match (a, b) with
   | (1, a) -> (\x y. x) a b
   | (3, 4) -> a + b`;;
let d4 = new_definition
  `d4 a b = match b with
   | a -> a + b`;;
let d5 = new_definition
  `d5 a = match a with
   | a -> 
    match a with
    | 1 -> 1
    | _ -> 10`;;
let d6 = new_definition
  `d6 a b = match a with
   | 1 -> a
   | 2 -> (match b with
           | 1 -> 3
           | 4 -> 5)`;;
let d7 = new_definition
  `d7 a = let (x, y) = a in (y, x)`;;
let d8 = new_definition
  `d8 a t = MAP (function (1,a) -> a + t | (2,y) -> 1 + y) [(a,2); (1,a)]`;;
let d9 = new_definition
  `d9 p t = (function (1, y) -> y | (2, y) -> t) p`;;

let (d1', eqs1), _, _ = assert_noexception replace_abstractions d1;;
assert_eq length eqs1 2;;
let (d1', eqs1), _, _ = assert_noexception replace_abstractions d1;;
let (d2', eqs2), _, _ = assert_noexception replace_abstractions d2;;
assert_eq length eqs2 2;;
let (d3', eqs3), _, _ = assert_noexception replace_abstractions d3;;
assert_eq length eqs3 1;;
let (d4', eqs4), _, _ = assert_noexception replace_abstractions d4;;
assert_eq length eqs4 0;;
(* replace_abstractions d5 should fail *)
let _ = assert_exception replace_abstractions d5;;
let (d6', eqs6), _, _ = assert_noexception replace_abstractions d6;;
assert_eq length eqs6 1;;
let (d7', eqs7), _, _ = assert_noexception replace_abstractions d7;;
assert_eq length eqs7 1;;
let (d8', eqs8), _, _ = assert_noexception replace_abstractions d8;;
assert_eq length eqs8 1;;
let (d9', eqs9), _, _ = assert_noexception replace_abstractions d9;;
assert_eq length eqs9 0;;

assert_exception eliminate_top_match (SPEC_ALL d1');;
let ths2 = eliminate_top_match (SPEC_ALL d2');;
assert_eq length ths2 2;;
let ths3 = eliminate_top_match (SPEC_ALL d3');;
assert_eq length ths3 2;;
assert_eq concl (el 1 ths3) `d3 3 4 = 3 + 4`;;
let ths4 = eliminate_top_match (SPEC_ALL d4');;
assert_eq (map (rand o concl)) ths4 [`a + a`];;
let ths9 = eliminate_top_match (SPEC_ALL d9');;
assert_eq length ths9 2;;
let ths1 = split_thm d1';;
assert_eq length ths1 1;;
let ths2 = split_thm d2';;
assert_eq length ths2 2;;
let ths3 = split_thm d3';;
assert_eq length ths3 2;;
assert_eq (concl o el 1) ths3 `d3 3 4 = 3 + 4`;;
let ths4 = split_thm d4';;
assert_eq length ths4 1;;
assert_eq (rand o concl o hd) ths4 `a + a`;;

let rules = [
  "FILTER", FILTER, [];
  "MAP", MAP, [];
  "HD", HD, [];
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_ADD", ARITH_ADD, [];
  "ARITH_GE", ARITH_GE, [];
  "ARITH_GT", ARITH_GT, [];
  "d1", d1, [];
  "d2", d2, [];
  "d3", d3, [];
  "d4", d4, [];
  "d6", d6, [];
  "d7", d7, [];
  "d8", d8, [];
  "d9", d9, [];
];;

(* Eliminate abs and inst types *)

let db = add_thms (empty_db "test" ~eliminate_abs:true) rules;;

find_most_specific_entry db `d1`;;
find_most_specific_entry db `d3`;;
let tm = `d3 1 2 + d2 1 2`;;
let consts1 = dependencies db tm ~inst_types:true;;
assert_eq length consts1 6;;

let tm = `d7 (1, 2)`;;
let consts2 = dependencies db tm ~inst_types:true;;
assert_eq length consts2 2;;

let tm = `d8 1 2`;;
let consts3 = dependencies db tm ~inst_types:true;;
assert_eq length consts3 5;;

let tm = `d9 (1, x) [&7]`;;
let consts4 = dependencies db tm ~inst_types:true;;
assert_eq length consts4 1;;
assert_eq (fun _ -> consts4) () [[`d9:num#(real)list->(real)list->(real)list`]];;

let tm = `(\[x]. x) (d1 4) + 
          d2 1 2 + 
          d3 1 2 +
          d4 (&7) 3 +
          d6 2 4 +
          (\(x, y). x) (d7 (1, 2)) +
          HD (d8 1 7) +
          d9 (2, 3) 5`;;

let consts = dependencies db tm ~inst_types:true;;
assert_eq length consts 20;;
write_rules_consts db "tests/out.hl" consts ~term:tm;;
loadt "tests/out.hl";;
assert_rhs (fun _ -> result) () `34`;;

assert_rhs (f_d1 `1`) None `[]:(num)list`;;
assert_rhs (f_d1 `4`) None `[4]`;;
assert_rhs (f_d2 `1` `2`) None `1`;;
assert_rhs (f_d2 `3` `4`) None `11`;;
assert_exception (f_d2 `1` `1`) None;;
assert_rhs (f_d3 `1` `0`) None `0`;;
assert_rhs (f_d3 `3` `4`) None `7`;;
assert_exception (f_d3 `2` `0`) None;;
assert_rhs (f_d4_real `&1` `3`) None `6`;;
assert_rhs (f_d6 `1` `0`) None `1`;;
assert_rhs (f_d6 `2` `1`) None `3`;;
assert_rhs (f_d6 `2` `4`) None `5`;;
assert_exception (f_d6 `0` `1`) None;;
assert_exception (f_d6 `2` `0`) None;;
assert_rhs (f_d7_num_num `3, 5`) None `5, 3`;;
assert_rhs (f_d8 `1` `7`) None `[9; 8]`;;
assert_rhs (f_d8 `2` `7`) None `[3; 9]`;;
assert_exception (f_d8 `0` `7`) None;;
assert_rhs (f_d9_num `1, b:num` `a:num`) None `b:num`;;
assert_rhs (f_d9_num `2, 7` `a:num`) None `a:num`;;
assert_exception (f_d9_num `3, 3` `3`) None;;

let f_d1, f_d2, f_d3, f_d4_real, f_d5, f_d6, f_d7_num_num, f_d8, f_d9_num =
  0, 0, 0, 0, 0, 0, 0, 0, 0;;

(* Eliminate abs and do not inst types *)

let db = add_thms (empty_db "test" ~eliminate_abs:true) rules;;

let tm = `(\[x]. x) (d1 4) + 
          d2 1 2 + 
          d3 1 2 +
          d4 (&7) 3 +
          d6 2 4 +
          (\(x, y). x) (d7 (1, 2)) +
          HD (d8 1 7) +
          d9 (2, 3) 5`;;

let consts = dependencies db tm ~inst_types:false;;
assert_eq length consts 20;;
write_rules_consts db "tests/out.hl" consts ~term:tm;;
loadt "tests/out.hl";;
assert_rhs (fun _ -> result) () `34`;;

assert_rhs (f_d1 `1`) None `[]:(num)list`;;
assert_rhs (f_d1 `4`) None `[4]`;;
assert_rhs (f_d2 `1` `2`) None `1`;;
assert_rhs (f_d2 `3` `4`) None `11`;;
assert_exception (f_d2 `1` `1`) None;;
assert_rhs (f_d3 `1` `0`) None `0`;;
assert_rhs (f_d3 `3` `4`) None `7`;;
assert_exception (f_d3 `2` `0`) None;;
assert_rhs (f_d4 `&1` `3`) None `6`;;
assert_rhs (f_d4 `a:A` `8`) None `16`;;
assert_rhs (f_d6 `1` `0`) None `1`;;
assert_rhs (f_d6 `2` `1`) None `3`;;
assert_rhs (f_d6 `2` `4`) None `5`;;
assert_exception (f_d6 `0` `1`) None;;
assert_exception (f_d6 `2` `0`) None;;
assert_rhs (f_d7 `3, 5`) None `5, 3`;;
assert_rhs (f_d8 `1` `7`) None `[9; 8]`;;
assert_rhs (f_d8 `2` `7`) None `[3; 9]`;;
assert_exception (f_d8 `0` `7`) None;;
assert_rhs (f_d9 `1, b:num` `a:num`) None `b:num`;;
assert_rhs (f_d9 `2, 7` `a:num`) None `a:num`;;
assert_rhs (f_d9 `2, &7` `a:real`) None `a:real`;;
assert_exception (f_d9 `3, 3` `3`) None;;

let f_d1, f_d2, f_d3, f_d4, f_d5, f_d6, f_d7, f_d8, f_d9 =
  0, 0, 0, 0, 0, 0, 0, 0, 0;;

(* Do not eliminate abs but inst types *)

let db = empty_db "test" ~eliminate_abs:false;;
add_extra_rewrite db ("LET_DEF", LET_DEF);;
add_extra_rewrite db ("LET_END_DEF", LET_END_DEF);;
let db = add_thms db rules;;

(* Do not include d6 and d8 since the inner matches are not eliminated *)
let tm = `(\[x]. x) (d1 4) + 
          d2 1 2 + 
          d3 1 2 +
          d4 (&7) 3 +
          (\(x, y). x) (d7 (1, 2)) +
          d9 (2, 3) 5`;;

let consts = dependencies db tm ~inst_types:true;;
assert_eq length consts 10;;
write_rules_consts db "tests/out.hl" consts ~term:tm;;
loadt "tests/out.hl";;
assert_rhs (fun _ -> result) () `20`;;

assert_rhs (f_d1 `1`) None `[]:(num)list`;;
assert_rhs (f_d1 `4`) None `[4]`;;
assert_rhs (f_d2 `1` `2`) None `1`;;
assert_rhs (f_d2 `3` `4`) None `11`;;
assert_exception (f_d2 `1` `1`) None;;
assert_rhs (f_d3 `1` `0`) None `0`;;
assert_rhs (f_d3 `3` `4`) None `7`;;
assert_exception (f_d3 `2` `0`) None;;
assert_rhs (f_d4_real `&1` `3`) None `6`;;
assert_rhs (f_d7_num_num `3, 5`) None `5, 3`;;
assert_rhs (f_d9_num `1, b:num` `a:num`) None `b:num`;;
assert_rhs (f_d9_num `2, 7` `a:num`) None `a:num`;;
assert_exception (f_d9_num `3, 3` `3`) None;;

let f_d1, f_d2, f_d3, f_d4_real, f_d5, f_d6, f_d7_num_num, f_d8, f_d9_num =
  0, 0, 0, 0, 0, 0, 0, 0, 0;;

(* Do not eliminate abs and do not inst types *)

let db = empty_db "test" ~eliminate_abs:false;;
add_extra_rewrite db ("LET_DEF", LET_DEF);;
add_extra_rewrite db ("LET_END_DEF", LET_END_DEF);;
let db = add_thms db rules;;

let tm = `(\[x]. x) (d1 4) + 
          d2 1 2 + 
          d3 1 2 +
          d4 (&7) 3 +
          (\(x, y). x) (d7 (1, 2)) +
          d9 (2, 3) 5`;;

let consts = dependencies db tm ~inst_types:false;;
assert_eq length consts 10;;
write_rules_consts db "tests/out.hl" consts ~term:tm;;
loadt "tests/out.hl";;
assert_rhs (fun _ -> result) () `20`;;

assert_rhs (f_d1 `1`) None `[]:(num)list`;;
assert_rhs (f_d1 `4`) None `[4]`;;
assert_rhs (f_d2 `1` `2`) None `1`;;
assert_rhs (f_d2 `3` `4`) None `11`;;
assert_exception (f_d2 `1` `1`) None;;
assert_rhs (f_d3 `1` `0`) None `0`;;
assert_rhs (f_d3 `3` `4`) None `7`;;
assert_exception (f_d3 `2` `0`) None;;
assert_rhs (f_d4 `&1` `3`) None `6`;;
assert_rhs (f_d4 `a:A` `8`) None `16`;;
assert_rhs (f_d7 `&3, b:B`) None `b:B, &3`;;
assert_rhs (f_d9 `1, b:num` `a:num`) None `b:num`;;
assert_rhs (f_d9 `2, &7` `a:real`) None `a:real`;;
assert_exception (f_d9 `3, 3` `3`) None;;
assert_exception (f_d9 `2, &7` `a:num`) None;;

let f_d1, f_d2, f_d3, f_d4, f_d5, f_d6, f_d7, f_d8, f_d9 =
  0, 0, 0, 0, 0, 0, 0, 0, 0;;

(* Test db 1 *)

let db = add_thms (empty_db "test1") [
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_GE", ARITH_GE, [];
  "ARITH_GT", ARITH_GT, [];
  "HD", HD, [`HD:(num)list->num`; `HD:(A)list->A`];
  "TL", TL, [`TL:(A)list->(A)list`; `TL:(num)list->(num)list`];
  "MAP", MAP, [`MAP:(num->num)->(num)list->(num)list`];
  "FILTER", FILTER, [
    `FILTER:(num->bool)->(num)list->(num)list`; 
    `FILTER:(A->bool)->(A)list->(A)list`;
  ];
  (* "AND_CLAUSES", AND_CLAUSES, [];
  "OR_CLAUSES", OR_CLAUSES, []; *)
  "NOT_CLAUSES", NOT_CLAUSES, [];
  "ALL", ALL, [];
  "EX", EX, [];
  (* "PAIR_EQ", PAIR_EQ; *)
  (* "injectivity \"option\"", injectivity "option"; *)
  (* "lambda4", lambda4;
  "lambda5", lambda5; *)
];;

set_rule db ~name:"num_eq" `(=):num->num->bool`;;
let num_eq =
  let const = `(=):num->num->bool` in
  fun a b opt -> trans_opt opt (NUM_EQ_CONV (list_mk_comb (const, [a; b])));;

(* dependencies db `FILTER (\x. ALL (\x. x > 2) [x]) [1;2;3]` *)

write_rules_consts db "tests/out.hl" [
  [`>`; `>=`];
  [`FILTER:(num->bool)->(num)list->(num)list`];
]
~term:`FILTER (\x. if x > 2 then T else F) [1;2;3;4325;452;345]`;;

loadt "tests/out.hl";;
assert_rhs (fun _ -> result) () `[3; 4325; 452; 345]`;;

set_extra_for_names db (Extra_memo Hashtbl_memo) ["HD"; "TL"; "MAP"];;
write_rules_names db "tests/out.hl" [
  "HD"; "TL"; "MAP"; "ALL"; "EX"
] ~term:`EX ((=) 3) [1;2;3]`;;

loadt "tests/out.hl";;
assert_rhs (fun _ -> result) () `T`;;

assert_rhs (f_HD `[a:real; &7]`) None `a:real`;;
assert_rhs (f_TL `[a:A; b:A]`) None `[b:A]`;;
assert_rhs (f_MAP (`HD:(num)list->num`, f_HD) `[[1]; [2; 3]]`) None `[1; 2]`;;

(* Test db 2 *)

let lambda1 = new_definition `lambda1 x y = (\x y. x + y) y x`;;
let lambda2 = new_definition `lambda2 x a = (\x y. x + y) a a + (\x. x + (\y. 1) x) x`;;
let lambda3 = new_definition `lambda3 x a = (\(x, y) z. x + y * z) (a, a) x`;;
let lambda4 = new_definition `lambda4 x = (\x. x) x`;;
let lambda5 = new_definition `lambda5 x y = (\x (a,b). x a) x y`;;
let lambda6 = new_definition `lambda6 n = (\x. n + x) 3`;;
let lambda7 = new_definition `lambda7 n = (\x y. n) 2 n`;;
let lambda8 = new_definition `lambda8 n = (\x. SUC ((\x. n) 3)) n`;;
let lambda9 = new_definition `lambda9 f = (\x. f x + 3) (f 2)`;;
let lambda10 = new_definition `lambda10 y = (\x. (x,y)) 3`;;
let lambda11 = new_definition `lambda11 x f = (\f. f x) (f 3)`;;
let lambda12 = new_definition `lambda12 x f = (\f. f x) (f (3 + x))`;;
let lambda13 = new_definition `lambda13 f g x = (\f. f x + g x) (f g)`;;
let lambda14 = new_definition `lambda14 f g x = (\f. f x + g x) (f (SUC x) g)`;;
let lambda15 = new_definition `lambda15 f g x = (\f. f x + g x x) (f (SUC x) (g (SUC x)))`;;
let f1 = new_definition `f1 f x = f x + x`;;
let f2 = new_definition `f2 x f y = f x + f y`;;

let rules = [
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_ADD", ARITH_ADD, [];
  "ARITH_MULT", ARITH_MULT, [];
  "lambda1", lambda1, [];
  "lambda2", lambda2, [];
  "lambda3", lambda3, [];
  "lambda4", lambda4, [];
  "lambda5", lambda5, [];
  "lambda6", lambda6, [];
  "lambda7", lambda7, [];
  "lambda8", lambda8, [];
  "lambda9", lambda9, [];
  "lambda10", lambda10, [];
  "lambda11", lambda11, [];
  "lambda12", lambda12, [];
  "lambda13", lambda13, [];
  "lambda14", lambda14, [];
  "lambda15", lambda15, [];
  "f1", f1, [];
  "f2", f2, [];
];;

(* No abs elim and no type insts *)

let db = add_thms (empty_db "test") rules;;

write_rules_names db "tests/out.hl" [
  "SUC"; "+"; "*";
  "lambda1"; "lambda2"; "lambda3"; "lambda4"; "lambda5";
  "lambda6"; "lambda7"; "lambda8"; "lambda9"; "lambda10";
  "lambda11"; "lambda12"; "lambda13"; "lambda14"; "lambda15";
  "f1"; "f2";
]
~term:`lambda7 (a:A)`;;

loadt "tests/out.hl";;
assert_eq concl result `lambda7 a = (a:A)`;;

assert_rhs (f_lambda1 `2` `5`) None `7`;;
assert_rhs (f_lambda2 `3` `7`) None `18`;;
assert_rhs (f_lambda3 `3` `7`) None `28`;;
assert_rhs (f_lambda4 `&3`) None `&3`;;
assert_rhs (f_lambda5 (`SUC`, f_SUC) `3, &8`) None `4`;;
assert_rhs (f_lambda6 `2`) None `5`;;
assert_rhs (f_lambda7 `&3`) None `&3`;;
assert_rhs (f_lambda8 `7`) None `8`;;
assert_rhs (f_lambda9 (`SUC`, f_SUC)) None `7`;;
assert_rhs (f_lambda10 `&3`) None `3, &3`;;
assert_rhs (f_lambda11 `2` (`lambda1`, f_lambda1)) None `5`;;
assert_rhs (f_lambda12 `2` (`lambda1`, f_lambda1)) None `7`;;
assert_rhs (f_lambda13 (`f1`, f_f1) (`SUC`, f_SUC) `7`) None `23`;;
assert_rhs (f_lambda14 (`f2:num->(num->num)->num->num`, f_f2) (`SUC`, f_SUC) `7`) None `25`;;
assert_rhs (f_lambda15 (`f2:num->(num->num)->num->num`, f_f2) (`lambda1`, f_lambda1) `7`) None `45`;; 

(* Test db 3 *)

let my_map = new_definition `my_map l = MAP SUC l`;;
let my_map2 = new_definition `my_map2 l = MAP ((+) 2) l`;;
let my_map3 = new_definition `my_map3 n l = MAP ((+) (SUC n)) l`;;
let my_map4 = new_definition `my_map4 n l = MAP (CONS (SUC n)) l`;;

let db = add_thms (empty_db "test") [
  "ARITH_SUC", ARITH_SUC, [];
  "ARITH_PRE", ARITH_PRE, [];
  "ARITH_ADD", ARITH_ADD, [];
  "ARITH_MULT", ARITH_MULT, [];
  "ARITH_EQ", ARITH_EQ, [];
  "ARITH_GE", ARITH_GE, [];
  "ARITH_GT", ARITH_GT, [];
  "MAP", MAP, [];
  "my_map", my_map, [];
  "my_map2", my_map2, [];
  "my_map3", my_map3, [];
  "my_map4", my_map4, [];
];;

write_rules_names db "tests/out.hl" [
  "SUC"; "+"; "MAP";
  "my_map"; "my_map2"; "my_map3"; "my_map4";
];;

loadt "tests/out.hl";;

assert_rhs (f_my_map `[0;5;3]`) None `[1;6;4]`;;
assert_rhs (f_my_map2 `[0;5;3]`) None `[2;7;5]`;;
assert_rhs (f_my_map3 `5` `[0;5;3]`) None `[6;11;9]`;;
assert_rhs (f_my_map4 `5` `[[]; [1]; [1;2]; []]`) None `[[6]; [6;1]; [6;1;2]; [6]]`;;

(* Other tests *)

let get_var var th =
  let tm = concl th in
  follow_path (find_path ((=) var) tm) tm;;

let db = empty_db "test";;
set_rule db `/\`;;
set_rule db `MAP`;;
set_rule db `MAP:(num->B)->(num)list->(B)list`;;
set_rule db `MAP:(A->num)->(A)list->(num)list`;;
set_rule db `MAP:(num->B#C)->(num)list->(B#C)list`;;

let rule = find_exact_entry db `MAP:(num->A)->(num)list->(A)list`;;
assert_eq (fun r -> r.const) rule `MAP:(num->B)->(num)list->(B)list`;;

let rule = find_most_specific_entry db `MAP:(num->A)->(num)list->(A)list`;;
assert_eq (fun r -> r.const) rule `MAP:(num->B)->(num)list->(B)list`;;

let rule = find_exact_entry db `MAP:(A->num)->(A)list->(num)list`;;
assert_eq (fun r -> r.const) rule `MAP:(A->num)->(A)list->(num)list`;;

let rule = find_most_specific_entry db `MAP:(num->C#B)->(num)list->(C#B)list`;;
assert_eq (fun r -> r.const) rule `MAP:(num->B#C)->(num)list->(B#C)list`;;

let rule = find_most_specific_entry db `MAP:(num->C#real)->(num)list->(C#real)list`;;
assert_eq (fun r -> r.const) rule `MAP:(num->B#C)->(num)list->(B#C)list`;;

let t0 = `:(A->B)->(A)list->(B)list` and
    t1 = `:(num->B)->(num)list->(B)list` and
    t2 = `:(num->B#C)->(num)list->(B#C)list` and
    t3 = `:(num->real#C)->(num)list->(real#C)list`;;

type_match t0 t3 [];;
type_match t1 t3 [];;
type_match t2 t3 [];;

formatted_results();;