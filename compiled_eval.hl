#load "str.cma";;

let generate_eval_errors = ref true;;
let generate_call_counters = ref false;;

type eval_error = {
  failure_msg: string;
  eval_name: string;
  eval_args: term list;
};;

exception Eval_error of eval_error list;;

let eval_error msg name args =
  raise (Eval_error [{
    failure_msg = msg;
    eval_name = name;
    eval_args = args;
  }]);;

let eval_error_propagate errs name args =
  raise (Eval_error ({
    failure_msg = (match errs with err :: _ -> err.failure_msg | _ -> "");
    eval_name = name;
    eval_args = args;
  } :: errs));;

let create_counter, reset_all_counters, get_counter, get_all_counters =
  let counters = Hashtbl.create 100 in
  let create (name: string) =
    try Hashtbl.find counters name
    with Not_found ->
      let counter = ref 0 in
      Hashtbl.add counters name counter;
      counter in
  let reset_all () =
    Hashtbl.iter (fun _ c -> c := 0) counters in
  let get name = !(Hashtbl.find counters name) in
  let get_all () =
    [] |> Hashtbl.fold (fun name v ls -> (name, !v) :: ls) counters
       |> List.sort (fun (_, v1) (_, v2) -> Pervasives.compare v2 v1) in
  create, reset_all, get, get_all;;

let create_memo, clear_all_memos =
  let memos = Hashtbl.create 100 in
  let create (name: string) =
    try Hashtbl.find memos name
    with Not_found ->
      let memo: (string, thm)Hashtbl.t = Hashtbl.create 10000 in
      Hashtbl.add memos name memo;
      memo in
  let clear_all () =
    Hashtbl.iter (fun _ m -> Hashtbl.clear m) memos in
  create, clear_all;;


let func_of_conv const (conv: conv) =
  let f args =
    conv (list_mk_comb (const, args)) in
  f;;

let string_of_term_type tm =
  Format.sprintf "%s:%s" (string_of_term tm) (string_of_type (type_of tm));;

(* A performance improvement trick from calc_num.ml *)
let standardize, standardize_tm, standardize_list, standardize_reset, standardize_enable =
  let cache = Hashtbl.create 100 in
  let enabled = ref true in
  let find t = 
    try Hashtbl.find cache t 
    with Not_found -> Hashtbl.add cache t t; t in
  let rec replace tm =
    match tm with
    | Var _ | Const _ -> find tm
    | Comb (s, t) -> (* find @@*) mk_comb (replace s, replace t)
    | Abs (v, b) -> (* find @@*) mk_abs (replace v, replace b) in
  let st th =
    let concl' = replace (concl th) in
    EQ_MP (REFL concl') th in
  let get () = Hashtbl.fold (fun _ t ts -> t :: ts) cache [] in
  let reset () = Hashtbl.clear cache in
  let enable flag = enabled := flag in
    (fun th -> if !enabled then st th else th), 
    (fun tm -> if !enabled then replace tm else tm), 
    get, reset, enable;;

let rec split_while p = function
  | [] -> [], []
  | (x :: xs) as l -> 
    if p x then
      let a, b = split_while p xs in
      x :: a, b
    else
      [], l;;

let strip_comb_gabs tm =
  match strip_comb tm with
  | Const ("GABS", _) as op, a1 :: args -> mk_comb (op, a1), args
  | op, args as r -> r;;

let dest_pattern =
  let dest_geq = dest_binary "GEQ" in
  let dest_simple_pattern tm =
    let _, body = strip_abs tm |> snd |> strip_exists in
    match strip_comb body with
    | Const ("_UNGUARDED_PATTERN", _), [lhs; rhs] ->
      fst (dest_geq lhs), None, fst (dest_geq rhs)
    | Const ("_GUARDED_PATTERN", _), [lhs; guard; rhs] ->
      fst (dest_geq lhs), Some guard, fst (dest_geq rhs)
    | _ -> failwith ("dest_simple_pattern: " ^ string_of_term tm) in
  let rec dest tm =
    match tm with
    | Comb (Comb (Const ("_SEQPATTERN", _), pat), rest) ->
      dest_simple_pattern pat :: dest rest
    | Abs _ -> [dest_simple_pattern tm]
    | _ -> failwith ("dest_pattern: " ^ string_of_term tm) in
  dest;;

let dest_match tm =
  match strip_comb tm with
  | Const ("_MATCH", _), [arg; pat] -> Some arg, dest_pattern pat
  | Const ("_FUNCTION", _), [pat] -> None, dest_pattern pat
  | Const ("_FUNCTION", _), [pat; arg] -> Some arg, dest_pattern pat
  | _ -> failwith "dest_match";;

let eliminate_top_match th =
  let tm = concl th in
  let _, rhs = dest_eq tm in
  match dest_match rhs with
  | Some arg, pats when forall (function (_, None, _) -> true | _ -> false) pats ->
    map (fun (p, _, _) -> 
      let eq = (TOP_DEPTH_CONV MATCH_CONV) (subst[p, arg] tm) in
      let th0 = INST[p, arg] th in
      EQ_MP eq th0) pats
  | _ -> failwith "eliminate_top_match";;

let rec GEN_BETAS_CONV tm = 
  (GEN_BETA_CONV ORELSEC (RATOR_CONV GEN_BETAS_CONV THENC GEN_BETA_CONV)) tm;;

let rec BODY_CONJUNCTS th =
  if is_forall (concl th) then
    BODY_CONJUNCTS (SPEC_ALL th)
  else if is_conj (concl th) then
    BODY_CONJUNCTS (CONJUNCT1 th) @ BODY_CONJUNCTS (CONJUNCT2 th)
  else [th];;

let eq_intro thm =
  if is_eq (concl thm) then thm else
  if is_neg (concl thm) then EQF_INTRO thm
  else EQT_INTRO thm;;
  
let extra_rewrites =
  (* let and_th = MESON[] `!P Q. P /\ Q <=> if P then Q else F` in
  let or_th = MESON[] `!P Q. P \/ Q <=> if P then T else Q` in *)
  let not_th = MESON[] `!P X Y. (if ~P then X else Y) <=> (if P then Y else X)` in
  fun th -> PURE_REWRITE_RULE[(*and_th; or_th;*) not_th] th;;

let split_thm th =
  let split th =
    let ths = try eliminate_top_match th with _ -> [th] in
    List.map eq_intro ths in
  BODY_CONJUNCTS th 
    |> List.map split 
    |> flat
    |> List.map extra_rewrites;;

let inst_type_thms tm ths =
  let inst_type th =
    let op, _ = concl th |> dest_eq |> fst |> strip_comb_gabs in
    let tyi = type_match (type_of op) (type_of tm) [] in
    INST_TYPE tyi th in
  List.map inst_type ths;;

(* The same as find_path but also considers variables in Abs *)
let find_full_path =
  let rec find p tm =
    match tm with
    | _ when p tm -> []
    | Abs (v, b) -> (try "b" :: find p b with Failure _ -> "v" :: find p v)
    | Comb (l, r) -> (try "r" :: find p r with Failure _ -> "l" :: find p l)
    | _ -> failwith "find_full_path" in
  fun p tm ->
    implode (find p tm);;

let follow_full_path =
  let rec follow s tm =
    match s with
    | [] -> tm
    | "v" :: t -> follow t (bndvar tm)
    | "b" :: t -> follow t (body tm)
    | "r" :: t -> follow t (rand tm)
    | "l" :: t -> follow t (rator tm)
    | _ -> failwith "follow_full_path" in
  fun s tm ->
    follow (explode s) tm;;

let is_fun_ty = can dest_fun_ty;;

let fix_name, clear_fixes, add_fix_repl =
  let repls = ref [] in
  let clear () = repls := [] in
  let add_repl str repl =
    let re = Str.regexp_string str in
    repls := List.stable_sort (fun (s1, _, _) (s2, _, _) -> String.length s2 - String.length s1) 
                              ((str, re, repl) :: !repls) in
  let fix name =
    List.fold_left (fun s (_, re, repl) -> Str.global_replace re repl s) name !repls in
  fix, clear, add_repl;;

let variant_name existing name =
  let rec loop n =
    let name' = if n = 0 then name else name ^ string_of_int n in
    if mem name' existing then
      loop (n + 1)
    else
      name' in
  loop 0;;

let suffix_of_type const =
  let name, ty = dest_const const in
  let c0 = mk_const (name, []) in
  let inst = type_match (type_of c0) ty [] in
  let tys = map fst inst |> filter (not o is_vartype) in
  let str = String.concat "_" (map string_of_type tys) in
  Str.global_replace (Str.regexp "[^a-zA-Z0-9]") "_" str
    |> Str.global_replace (Str.regexp "__+") "_"
    |> Str.global_replace (Str.regexp "^_+\\|_+$") "";;

(* Standard names for common symbols *)
let () =
  clear_fixes();
  List.iter (uncurry add_fix_repl) [
    "/\\", "AND";
    "\\/", "OR";
    "==>", "IMP";
    "~", "NOT";
    "+", "ADD";
    "-", "SUB";
    "*", "MUL";
    "/", "DIV";
    "<", "LT";
    ">", "GT";
    "<=", "LE";
    ">=", "GE";
    "=", "EQ";
];;

type arg_type =
    Ttype of hol_type
  | Tfun of arg_type list * hol_type;;

let get_type =
  let rec get ty =
    match splitlist dest_fun_ty ty with
    | [], t -> Ttype t
    | tys, t -> Tfun (map get tys, t) in
  fun tm ->
    get (type_of tm);;

let rec get_type_vars t =
  match t with
  | Ttype ty -> tyvars ty
  | Tfun (args, r) -> end_itlist union (tyvars r :: map get_type_vars args);;

type pattern = 
    Pvar of int
  | Papp of term * pattern list;;

let check_arg_form, check_args_form =
  let rec chk t stk free =
    if is_comb t then
      let rator, rand = dest_comb t in
      let free', pat1 = chk rand [] free in
      chk rator (pat1 :: stk) free'
    else if is_var t then
      if stk = [] then
        let newi = List.length free in
        try (free, Pvar (newi - index t free - 1))
        with _ -> (t :: free, Pvar newi)
      else 
        failwith ("check_arg_form: " ^ fst (dest_var t) ^ " occurs as a variable on lhs")
    else if is_const t then
      (free, Papp (t, stk))
    else
      failwith ("check_arg_form: lambda abstraction not allowed on lhs") 
  in
  let check_arg_form tm =
    match chk tm [] [] with
      | (fv, Papp (head, args)) -> (List.rev fv, head, args)
      | _ -> failwith "check_arg_form: ill-formed lhs" in
  let check_args_form tms =
    let fv, args =
      List.fold_right (fun arg (fv, args) ->
        let fv', arg' = chk arg [] fv in
        (fv', arg' :: args)) tms ([], []) in
    List.rev fv, args in
  check_arg_form, check_args_form;;


type extra = Extra_counter | Extra_memo;;

type rewrite_rec = {
  args: pattern list;
  arg_types: arg_type list;
  fv: term list;
  thm_name: string;
  thm_index: int;
  thm: thm;
};;

type db_rec = {
  f_name: string;
  const: term;
  type_inst_const: term option;
  nargs: int;
  mutable extra: extra list;
  mutable rewrites: rewrite_rec list;
};;

type database = Database of (string, (term * db_rec) list) Hashtbl.t;;

let empty_db () = Database (Hashtbl.create 100);;

let entries (Database db) = Hashtbl.fold (fun name e r -> (name, e) :: r) db [];;

let has_entries (Database db) name =
  Hashtbl.mem db name;;

let add_entry (Database db) const entry =
  let name, _ = dest_const const in
  let entries = try Hashtbl.find db name with Not_found -> [] in
  Hashtbl.replace db name ((const, entry) :: entries);;

let same_extra e1 e2 =
  match e1, e2 with
  | Extra_counter, Extra_counter -> true
  | Extra_memo, Extra_memo -> true
  | _ -> false;;

let add_extra ls e =
  e :: filter (fun e' -> not (same_extra e e')) ls;;

let find_entries (Database db) const =
  let name, ty = dest_const const in
  let entries = Hashtbl.find db name in
  filter (fun (c, db_rec) -> can (type_match (type_of c) ty) []) entries
    |> map snd;;

let find_most_specific_entry db const =
  let match_length ty1 ty2 =
    type_match ty1 ty2 []
      |> List.filter (fun (a, _) -> is_type a)
      |> List.length in
  try
    let _, ty = dest_const const in
    find_entries db const
      |> List.map (fun e -> match_length (type_of e.const) ty, e)
      |> List.sort (fun (l1, _) (l2, _) -> Pervasives.compare l1 l2)
      |> List.hd |> snd
  with Failure _ | Not_found ->
    failwith (Format.sprintf "find_most_specific_entry: no entries for `%s`"
                (string_of_term_type const));;

let find_exact_entry db const =
  let exact_match ty1 ty2 =
    type_match ty1 ty2 []
      |> List.for_all (fun (a, _) -> is_vartype a) in
  try
    let _, ty = dest_const const in
    find_entries db const
      |> List.find (fun e -> exact_match (type_of e.const) ty)
  with Not_found ->
    failwith (Format.sprintf "find_exact_entry: no entries for `%s`"
                (string_of_term_type const));;

let get_entries (Database db) names =
  map (Hashtbl.find db) names |> flat |> map snd;;

let set_extra_for_consts db extra consts =
  List.map (find_entries db) consts
    |> List.concat
    |> List.iter (fun e -> e.extra <- add_extra e.extra extra);;

let set_extra_for_names db extra names =
  get_entries db names
    |> List.iter (fun (e: db_rec) -> e.extra <- add_extra e.extra extra);;
  
let set_rule db ?name const =
  if can (find_exact_entry db) const then 
    failwith (Format.sprintf "set_rule: duplicate entry for `%s`" 
                (string_of_term_type const));
  let c_name, cty = dest_const const in
  let names = 
    try get_entries db [c_name] |> List.map (fun e -> e.f_name)
    with Not_found -> [] in
  let f_name = variant_name names @@
    match name with
    | None -> ["f"; fix_name c_name; suffix_of_type const]
                |> List.filter (fun s -> s <> "")
                |> String.concat "_"
    | Some name -> name in
  let nargs =
    match get_type const with
    | Tfun (args, _) -> List.length args
    | _ -> 0 in
  let entry: db_rec = {
    f_name = f_name;
    const = const;
    type_inst_const = None;
    nargs = nargs;
    extra = [];
    rewrites = [];
  } in
  add_entry db const entry;;

let add_thm db ?type_tm (thm_name, index, eq_th) =
  let const, _ = concl eq_th |> dest_eq |> fst |> strip_comb in
  let name, cty = dest_const const in
  let key_const, type_inst = 
    match type_tm with 
    | None -> const, []
    | Some const -> const, type_match cty (type_of const) [] in
  if name <> fst (dest_const key_const) then failwith "add_thm: bad type_tm";
  let th1 = INST_TYPE type_inst eq_th in
  let lhs, rhs = dest_eq (concl th1) in
  let fv, _, arg_pats = check_arg_form lhs in
  let entry =
    try find_exact_entry db key_const
    with Failure _ ->
      let names = 
        try get_entries db [name] |> List.map (fun e -> e.f_name)
        with Not_found -> [] in
      let e = {
        f_name = ["f"; fix_name name; suffix_of_type key_const]
                  |> List.filter (fun s -> s <> "")
                  |> String.concat "_"
                  |> variant_name names;
        const = key_const;
        type_inst_const = if key_const = const then None else Some key_const;
        nargs = List.length arg_pats;
        extra = [];
        rewrites = [];
      } in
      add_entry db key_const e; e in
  if entry.nargs <> List.length arg_pats then
    failwith (Format.sprintf "Incorrect number of arguments for '%s' in '%s'" 
                             name (string_of_thm eq_th));
  entry.rewrites <- { 
    args = arg_pats;
    arg_types = map get_type @@ snd (strip_comb lhs);
    fv = fv;
    thm = th1;
    thm_name = thm_name;
    thm_index = index;
  } :: entry.rewrites;;

let add_thms db ths =
  let add (name, th, type_tms) =
    let eqs = split_thm th in
    let add_all type_tm = 
      List.iteri (fun i th -> add_thm db ?type_tm (name, i + 1, th)) eqs in
    match type_tms with
    | [] -> add_all None
    | _ -> List.iter (fun tm -> add_all (Some tm)) type_tms
  in
  List.iter add ths;
  db;;


type app_arg_type = Arg_term | Arg_theorem | Arg_function;;

type app_type = 
    Basic_app of term 
  | Const_app of db_rec 
  | Var_app of string
  | Abs_app of term * eval_tree

and func_app_rec = {
  app_type: app_type;
  applied_args: eval_tree list;
  extra_args: app_arg_type list;
  (* Arguments for free variables inside abstractions *)
  fixed_args: term list;
}

and eval_tree =
    Refl of term
  | Func_app of func_app_rec;;

let get_eval_type = function
  | Refl _ -> Arg_term
  | Func_app {extra_args = []} -> Arg_theorem
  | Func_app {extra_args = _ :: _} -> Arg_function;;

let is_eval_tree_refl = function
  | Refl _ -> true
  | _ -> false;;

let is_basic_app = function
  | Func_app {app_type = Basic_app _} -> true
  | _ -> false;;

let build_eval_tree db =
  let rec mk_app head args =
    let app_type =
      match head with
      | _ when is_gabs head -> 
        let _, body = strip_gabs head in
        Abs_app (head, build body)
      | Var (name, _) -> Var_app name
      | Const (name, _) -> begin
          if has_entries db name then
            Const_app (find_most_specific_entry db head)
          else
            Basic_app head
        end
      | _ -> invalid_arg "mk_app: head should be a variable, a constant, or an abstraction" in
    match get_type head with
    | Tfun (l, _) ->
      let _, extra = chop_list (List.length args) l in
      let tys = List.map (function Tfun _ -> Arg_function | Ttype _ -> Arg_term) extra in
      Func_app { 
        app_type = app_type; 
        applied_args = args; 
        extra_args = tys; 
        fixed_args = [] 
      }
    | _ -> invalid_arg "mk_app: head should be a function"
  and build tm =
    match tm with
    | Comb _ ->
      let op, args = strip_comb_gabs tm in
      let arg_trees = List.map build args in
      mk_app op arg_trees
    | _ -> (try mk_app tm [] with Invalid_argument _ -> Refl tm)
  in
  build;;

let optimize_eval_tree =
  let split_args head args =
    let refls, rest = split_while is_eval_tree_refl args in
    let head' = List.fold_left (curry mk_comb) head
      (List.map (function Refl t -> t | _ -> failwith "impossible") refls) in
    head', rest in
  let rec optimize = function
    | Refl _ as t -> t
    | Func_app ({app_type = Basic_app head; applied_args = args} as app) ->
      let head', args' = split_args head (List.map optimize args) in
      if args' = [] && app.extra_args = [] && app.fixed_args = [] then
        Refl head'
      else
        Func_app {app with app_type = Basic_app head'; applied_args = args'}
    | Func_app ({app_type = t; applied_args = args} as app) ->
      let t' = match t with Abs_app (tm, body) -> Abs_app (tm, optimize body) | _ -> t in
      Func_app {app with app_type = t'; applied_args = List.map optimize args} in
  optimize;;

let extract_abs (name_index, init_abs) (base_tm, base_name) eval_tree =
  let index = ref name_index in
  let abstractions = ref init_abs in
  let assoc_rewrite tm body =
    try let _, (_, rw, _, _) = find (fun tm2, _ -> tm = tm2) !abstractions in rw
    with _ -> 
      let rw = {
        f_name = (incr index; Format.sprintf "abs_%d" !index);
        const = tm;
        type_inst_const = None;
        nargs = List.length (fst (strip_gabs tm));
        extra = [];
        rewrites = [];
      } in
      (abstractions := !abstractions @ [(tm, (body, rw, base_tm, base_name))]); rw in
  let rec extract = function
    | Func_app ({app_type = Abs_app (tm, body); applied_args = args} as app) ->
      let fv = frees tm in
      let body' = extract body in
      Func_app { app with 
        app_type = Const_app (assoc_rewrite tm body'); 
        applied_args = map extract args;
        fixed_args = fv;
      }
    | Func_app app -> Func_app {app with applied_args = map extract app.applied_args}
    | Refl _ as t -> t
  in
  let result = extract eval_tree in
  result, (!index, !abstractions);;

type expr =
  | Match of expr * (expr * expr) list
  | Try of expr * (expr * expr) list
  | Lambda of expr list * expr
  | Tuple of expr list
  | List_expr of expr list
  | Let of bool * string * expr list * expr * expr option
  | Let_and of expr list * expr option
  | If of expr * expr * expr
  | App of expr * expr
  | Term of term
  | String of string
  | Raw of string;;

let is_app = function App _ -> true | _ -> false;;

let is_let = function Let _ -> true | _ -> false;;

let is_match = function Match _ -> true | _ -> false;;

let is_compound = function
  | Let _ | Let_and _ | Match _ | Try _ | Lambda _ -> true
  | _ -> false;;

let mk_app (head, args) =
  List.fold_left (fun e a -> App (e, a)) head args;;

let mk_raw s = Raw s;;

let mk_tuple = function
  | [] -> Raw "()"
  | [e] -> e
  | es -> Tuple es;;

let mk_list exprs = List_expr exprs;;

let mk_int_list ints = mk_list (List.map (fun i -> mk_raw (string_of_int i)) ints);;

let mk_let_and ?(body = None) = function
  | [] -> failwith "mk_let_and: empty list"
  | exprs when forall is_let exprs -> Let_and (exprs, body)
  | _ -> failwith "mk_let_and: all expressions must be let-expressions";;

let mk_let ?(args = []) ?(body = None) (name, expr) =
  Let (false, name, args, expr, body);;

let rec chain_let = function
  | [e] -> e
  | Let (r, a, b, e, _) :: es ->
    Let (r, a, b, e, Some (chain_let es))
  | Let_and (exprs, _) :: es ->
    Let_and (exprs, Some (chain_let es))
  | _ -> failwith "chain_let";;

let rec append_let_body let_e body =
  match let_e with
  | Let_and (exprs, None) -> Let_and (exprs, Some body)
  | Let_and (exprs, Some n) -> Let_and (exprs, Some (append_let_body n body))
  | Let (r, a, b, e, None) -> Let (r, a, b, e, Some body)
  | Let (r, a, b, e, Some n) -> Let (r, a, b, e, Some (append_let_body n body))
  | _ -> failwith "append_let_body";;

let print_expr =
  let let_form and_flag rec_flag =
    match and_flag, rec_flag with
    | true, _ -> "and"
    | _, true -> "let rec"
    | _ -> "let" in
  let rec print_args fmt =
    Format.pp_print_list ~pp_sep:(fun fmt () -> Format.pp_print_string fmt " ") print_expr fmt
  and print_let and_flag fmt = function
    | Let (r, name, args, expr, None) ->
      Format.fprintf fmt "@[<v 2>%s %s %a%s=@ %a@]@ "
        (let_form and_flag r) name 
        print_args args (if args = [] then "" else " ")
        print_expr expr
    | Let (r, name, args, expr, Some body) ->
      let f = format_of_string 
        (if is_compound expr then
          "@[<v 2>let%s %s %a%s=@ %a in@]@ %a"
        else
          "@[<hv 2>let%s %s %a%s=@ %a in@]@ %a") in
      Format.fprintf fmt f
          (if r then " rec" else "") name
          print_args args (if args = [] then "" else " ")
          print_expr expr print_expr body
    | _ -> failwith "print_let: Let expected"
  and print_expr fmt = function
  | Raw s -> Format.fprintf fmt "%s" s
  | String s -> Format.fprintf fmt "\"%s\"" s
  | Term tm -> 
    Format.fprintf fmt "`(%s):%s`" 
      (string_of_term tm) (string_of_type (type_of tm))
  | Tuple es -> 
    Format.fprintf fmt "(%a)" 
      (Format.pp_print_list 
        ~pp_sep:(fun fmt () -> Format.pp_print_string fmt ", ")
        print_expr) es
  | List_expr es ->
    Format.fprintf fmt "[%a]"
      (Format.pp_print_list
        ~pp_sep:(fun fmt () -> Format.pp_print_string fmt "; ")
        print_expr) es
  | Lambda (args, body) ->
    Format.fprintf fmt "@[<v 2>fun %a ->@,%a@]"
      print_args args print_expr body
  | If (c, t, e) ->
    Format.fprintf fmt "@[<v 2>if %a then@ %a@;<1 -2>else@ %a@]"
      print_expr c print_expr t print_expr e
  | App (f, x) ->
    let f1 = format_of_string "%a" in
    let f2 = format_of_string (if is_app x then " (%a)" else " %a") in
    Format.fprintf fmt (f1 ^^ f2) print_expr f print_expr x
  | Let _ as expr -> print_let false fmt expr
  | Let_and (expr1 :: exprs, None) ->
    Format.fprintf fmt "@[<v>%a%a@]"
      (print_let false) expr1
      (Format.pp_print_list ~pp_sep:(fun fmt () -> ()) (print_let true)) exprs
  | Let_and (expr1 :: exprs, Some body) ->
    Format.fprintf fmt "@[<v>%a%a in@]@ %a"
      (print_let false) expr1
      (Format.pp_print_list ~pp_sep:(fun fmt () -> ()) (print_let true)) exprs
      print_expr body
  | Let_and _ -> failwith "Let_and: empty list"
  | Try (expr, cases) ->
    Format.fprintf fmt "@[<v 2>try@ %a@]@ with@,| %a"
      print_expr expr
      (Format.pp_print_list 
        ~pp_sep:(fun fmt () -> Format.pp_print_string fmt "| ")
        (fun fmt (pat, body) ->
          let f = format_of_string 
            (if is_compound body then
              "@[<v>%a ->@ %a@]@,"
             else
              "@[<hv>%a ->@ %a@]@,") in
          Format.fprintf fmt f
            print_expr pat print_expr body)) cases
  | Match (expr, cases) ->
    Format.fprintf fmt "match %a with@,| %a"
      print_expr expr
      (Format.pp_print_list 
        ~pp_sep:(fun fmt () -> Format.pp_print_string fmt "| ")
        (fun fmt (pat, body) ->
          let f = format_of_string 
            (if is_compound body then
              "@[<v>%a ->@ %a@]@,"
             else
              "@[<hv>%a ->@ %a@]@,") in
          Format.fprintf fmt f
            print_expr pat print_expr body)) cases in
  print_expr;;

let enum_names s n =
  List.map (fun k -> s ^ string_of_int k) (1 -- n);;

let compile_eval_tree =
  let mk_refl expr = App (Raw "REFL", expr) in
  let mk_comb op_name args =
    let comb eq (arg_name, arg_type) =
      let arg_expr = Raw arg_name in
      let arg_eq =
        match arg_type with
        | Arg_term -> mk_refl arg_expr
        | Arg_theorem -> arg_expr
        | Arg_function -> mk_refl (App (Raw "fst", arg_expr)) in
      App (Raw "MK_COMB", mk_tuple [eq; arg_eq]) in
    List.fold_left comb (mk_refl (Raw op_name)) args 
  in
  let dest_comb tm_name names =
    let rec dest prev names =
      match names with
      | [] -> []
      | name :: names ->
        mk_let (Format.sprintf "op, %s" name, App (Raw "dest_comb", Raw prev)) ::
          dest "op" names in
    if names = [] then [mk_let ("op", Raw tm_name)]
    else dest tm_name (List.rev names) 
  in
  let get_fixed_args tms =
    List.map (fun tm ->
      let name, ty = dest_var tm in
      if is_fun_ty ty then 
        mk_tuple [mk_raw name; mk_raw ("func_" ^ name)]
      else 
        mk_raw name) tms 
  in
  let compile_cond name cond_expr then_expr else_expr =
    let type_expr = mk_let ("ty", App (Raw "type_of", Raw "then_tm")) in
    let t_var = mk_let ("then_var", App (Raw "mk_var", mk_tuple [String "t"; Raw "ty"])) in
    let e_var = mk_let ("else_var", App (Raw "mk_var", mk_tuple [String "e"; Raw "ty"])) in
    let cond_eq = mk_let ("cond_eq", cond_expr) in
    let cond_th =
      mk_let ("th0", mk_comb "op" ["cond_eq", Arg_theorem; "then_tm", Arg_term; "else_tm", Arg_term]) in
    let then_branch = chain_let [
      mk_let ("th1", Raw "INST[then_tm, then_var; else_tm, else_var] (INST_TYPE[ty, aty] COND_T)");
      mk_let ("then_eq", then_expr);
      Raw "TRANS (TRANS th0 th1) then_eq"
    ] in
    let else_branch = chain_let [
      mk_let ("th1", Raw "INST[then_tm, then_var; else_tm, else_var] (INST_TYPE[ty, aty] COND_F)");
      mk_let ("else_eq", else_expr);
      Raw "TRANS (TRANS th0 th1) else_eq"
    ] in
    let cond_test = Raw "rand (concl cond_eq) = true_tm" in
    let if_expr = If (cond_test, then_branch, else_branch) in
    chain_let (dest_comb name ["cond_tm"; "then_tm"; "else_tm"] @ 
      [type_expr; t_var; e_var; cond_eq; cond_th; if_expr])
  in
  let compile_and name expr1 expr2 =
    let a1_eq = mk_let ("a1_eq", expr1) in
    let cond_test = Raw "rand (concl a1_eq) = true_tm" in
    let then_branch = chain_let [
      mk_let ("a2_eq", expr2);
      mk_let ("and_th", Raw "INST[rand (concl a2_eq), p_var_bool] T_AND");
      Raw "TRANS (MK_COMB (MK_COMB (REFL op, a1_eq), a2_eq)) and_th"
    ] in
    let else_branch = chain_let [
      mk_let ("and_th", Raw "INST[a2, p_var_bool] F_AND");
      Raw "TRANS (MK_COMB (MK_COMB (REFL op, a1_eq), REFL a2)) and_th"
    ] in
    let if_expr = If (cond_test, then_branch, else_branch) in
    chain_let (dest_comb name ["a1"; "a2"] @ [a1_eq; if_expr])
  in
  let compile_or name expr1 expr2 =
    let a1_eq = mk_let ("a1_eq", expr1) in
    let cond_test = Raw "rand (concl a1_eq) = true_tm" in
    let then_branch = chain_let [
      mk_let ("or_th", Raw "INST[a2, p_var_bool] T_OR");
      Raw "TRANS (MK_COMB (MK_COMB (REFL op, a1_eq), REFL a2)) or_th"
    ] in
    let else_branch = chain_let [
      mk_let ("a2_eq", expr2);
      mk_let ("or_th", Raw "INST[rand (concl a2_eq), p_var_bool] F_OR");
      Raw "TRANS (MK_COMB (MK_COMB (REFL op, a1_eq), a2_eq)) or_th"
    ] in
    let if_expr = If (cond_test, then_branch, else_branch) in
    chain_let (dest_comb name ["a1"; "a2"] @ [a1_eq; if_expr])
  in
  let compile_app compile name app =
    let arg_names = enum_names "a" (List.length app.applied_args) in
    let extra_names = enum_names "tm" (List.length app.extra_args) in
    let arg_list = map2 (fun name arg -> name, get_eval_type arg) arg_names app.applied_args in
    let full_arg_list = arg_list @ zip extra_names app.extra_args in
    let extract_arg (arg_name, arg_type) =
      match arg_type with
      | Arg_term -> Raw arg_name
      | Arg_theorem -> App (Raw "rand", App (Raw "concl", Raw arg_name))
      | Arg_function -> Raw arg_name in
    let final_expr = 
      match app.app_type with
      | Abs_app _ -> failwith "compile_eval_tree: Abs_app is not allowed"
      | Basic_app _ -> mk_comb "op" full_arg_list
      | Const_app _ | Var_app _ ->
        let fixed_args = get_fixed_args app.fixed_args in
        let args' = map extract_arg full_arg_list in
        let f_name = 
          match app.app_type with 
          | Const_app f -> f.f_name 
          | Var_app f -> "func_" ^ f 
          | _ -> failwith "impossible" in
        let app_expr = mk_app (Raw f_name, fixed_args @ args') in
        if forall (fun (_, ty) -> ty = Arg_term || ty = Arg_function) full_arg_list then app_expr
        else
          let e1 = mk_let ("f_eq", app_expr) in
          let e2 = mk_comb "op" full_arg_list in
          let e3 = mk_app (Raw "TRANS", [e2; Raw "f_eq"]) in
          append_let_body e1 e3 in
    let arg_eqs =
      zip arg_list app.applied_args
      |> List.filter (fun ((_, ty), _) -> ty <> Arg_term)
      |> List.map (fun ((name, _), arg) -> mk_let (name, compile name arg)) in
    chain_let (dest_comb name arg_names @ arg_eqs @ [final_expr]), arg_names, extra_names
  in
  let rec compile name t =
    match t with
    | Func_app {app_type = Basic_app (Const ("COND", _)); applied_args = [cond_arg; then_arg; else_arg]} ->
      compile_cond name (compile "cond_tm" cond_arg) (compile "then_tm" then_arg) (compile "else_tm" else_arg)
    | Func_app {app_type = Basic_app (Const ("/\\", _)); applied_args = [arg1; arg2]} ->
      compile_and name (compile "a1" arg1) (compile "a2" arg2)
    | Func_app {app_type = Basic_app (Const ("\\/", _)); applied_args = [arg1; arg2]} ->
      compile_or name (compile "a1" arg1) (compile "a2" arg2)
    | Refl _ -> mk_refl (Raw name)
    | Func_app ({applied_args = []} as app) when not (is_basic_app t) ->
      let f_name = 
        (match app.app_type with
        | Var_app name -> "func_" ^ name
        | Const_app rw -> rw.f_name
        | _ -> failwith "Partial_app (Basic_app, Abs_app) is not allowed") in
      let f_expr = mk_app (Raw f_name, get_fixed_args app.fixed_args) in
      mk_tuple [Raw name; f_expr]
    | Func_app app ->
      let body_expr, _, extra_names = compile_app compile name app in
      if extra_names = [] then
        body_expr
      else
        mk_tuple [Raw name; Lambda (List.map mk_raw extra_names, body_expr)]
  in
  compile;;

type case_info = {
  vars: (term * string) list;
  rhs: eval_tree;
  args: (pattern * arg_type) list;
  th_name: string;
  (* required to locate fixed arguments (free variables) *)
  rhs_tm: term;
};;

type func_info = {
  name: string;
  arg_types: arg_type list;
  fixed_args: term list;
  poly_indices: int list;
  arg_ty_name: string;
  extra: extra list;
  cases: case_info list;
};;

let compile_rhs ty_inst case =
  let var_exprs =
    case.vars 
    |> filter (fun (v, _) -> tyvars (type_of v) <> [])
    |> map (fun (v, var_name) ->
        let name, _ = dest_var v in
        let args = mk_tuple [String name; App (Raw "type_of", Raw name)] in
        mk_let (var_name, App (Raw "mk_var", args))) in
  let type_inst =
    match ty_inst with
    | None -> Raw case.th_name
    | Some expr ->
      mk_app (Raw "INST_TYPE", [expr; Raw case.th_name]) in
  let inst =
    List.map (fun tm, var_name -> fst (dest_var tm), var_name) case.vars in
  let inst_expr =
    if inst = [] then type_inst
    else
      let inst_str = Format.sprintf "[%s]" 
        (String.concat "; " (map (fun (a, b) -> a ^ ", " ^ b) inst)) in
      mk_app (Raw "INST", [Raw inst_str; type_inst]) in
  if is_eval_tree_refl case.rhs then
    chain_let (var_exprs @ [inst_expr])
  else
    let expr = compile_eval_tree "rhs" case.rhs in
    chain_let (var_exprs @ [
      mk_let ("th", inst_expr);
      mk_let ("rhs", Raw "rand (concl th)");
      mk_let ("rhs_eq", expr);
      mk_app (Raw "TRANS", [Raw "th"; Raw "rhs_eq"])
    ]);;

let compile_function func =
  let var_name vars i = fst (dest_var (fst (List.nth vars i))) in
  let compile_case ty_inst case =
    let vars = case.vars in
    let rec compile_pat = function
      | Pvar i, Tfun (args, _) -> mk_tuple [Raw (var_name vars i); Raw ("func_" ^ var_name vars i)]
      | Pvar i, _ -> Raw (var_name vars i)
      | Papp _, Tfun _ -> failwith "Patterns are not allowed for functions"
      | Papp (c, ps), ty ->
        let c_name, _ = dest_const c in
        let cst = App (Raw "Const", mk_tuple [String c_name; Raw "_"]) in
        List.fold_left (fun l r -> App (Raw "Comb", Tuple [l; r])) cst 
          (List.map (fun p -> compile_pat (p, ty)) ps) in
    let pats = List.map compile_pat case.args in
    let body = compile_rhs ty_inst case in
    pats, body
  in
  let ty_inst =
    if func.poly_indices = [] then None
    else Some (mk_raw "ty_inst") in
  let get_ty_exprs arg_exprs =
    if func.poly_indices = [] then []
    else
      let arg_list = List.map (List.nth arg_exprs) func.poly_indices in
      let e = mk_app (Raw "itlist2", [
        Raw "type_match"; 
        Raw func.arg_ty_name; 
        mk_list (List.map (fun a -> App (Raw "type_of", a)) arg_list); 
        mk_list []
      ]) in
      [mk_let ("ty_inst", e)] in
  let add_try expr arg_exprs =
    if not !generate_eval_errors then expr
    else
      let case1 = (Raw "Failure msg", 
                   mk_app (Raw "eval_error", 
                    [Raw "msg"; String func.name; mk_list arg_exprs])) in
      let case2 = (Raw "Eval_error err",
                   mk_app (Raw "eval_error_propagate", 
                    [Raw "err"; String func.name; mk_list arg_exprs])) in
      Try (expr, [case1; case2]) in
  let add_counter name expr =
    mk_let ~body:(Some expr) 
      ("()", App (Raw "incr", Raw (Format.sprintf "counter_%s" name))) in
  let add_memo name arg_exprs expr =
    (* TODO: only one argument is supported now *)
    let key_expr = mk_let ("key", App (Raw "string_of_term", hd arg_exprs)) in
    (* mk_let ~body:(Some expr)
      ("()", mk_app (Raw "Hashtbl.replace", [Raw ("memo_" ^ name); key; Raw "TRUTH"])) in *)
    let name_expr = Raw ("memo_" ^ name) in
    let find_expr = mk_app (Raw "Hashtbl.find", [name_expr; Raw "key"]) in
    let save_expr = mk_let ("()", mk_app (Raw "Hashtbl.add", [name_expr; Raw "key"; Raw "result"])) in
    append_let_body key_expr
      (Try (find_expr, [Raw "Not_found",
        chain_let [mk_let ("result", expr); save_expr; Raw "result"]])) in
  let add_extra arg_exprs expr extra =
    match extra with
    | Extra_counter -> add_counter func.name expr
    | Extra_memo -> add_memo func.name arg_exprs expr in
  let case1 = hd func.cases in
  match List.map (compile_case ty_inst) func.cases with
  | [] -> failwith "compile_function: no cases"
  | [args, body] when forall (function (Pvar _, _) -> true | _ -> false) case1.args ->
    let arg_exprs = 
      List.map (fun arg ->
        match arg with
        | (Pvar i, _) -> Raw (var_name case1.vars i)
        | _ -> failwith "impossible") 
      case1.args in
    let body_expr' = chain_let (get_ty_exprs arg_exprs @ [body]) in
    let body_expr = List.fold_left (add_extra arg_exprs) body_expr' func.extra in
    Let (true, func.name, args, add_try body_expr arg_exprs, None)
  | cs ->
    let arg_names = enum_names "tm" (List.length case1.args) in
    let arg_exprs = 
      List.mapi (fun i arg ->
        let name = "tm" ^ string_of_int (i + 1) in
        match arg with
        | (_, Tfun _) -> App (Raw "fst", Raw name)
        | _ -> Raw name)
      case1.args in
    let err_pat = 
      (Raw "_", App (Raw "failwith", String (Format.sprintf "No match: %s" func.name))) in
    let cs' = List.map (fun (pats, body) -> mk_tuple pats, body) cs in
    let match_expr = Match (mk_tuple (List.map mk_raw arg_names), cs' @ [err_pat]) in
    let body_expr' = chain_let (get_ty_exprs arg_exprs @ [match_expr]) in
    let body_expr = List.fold_left (add_extra arg_exprs) body_expr' func.extra in
    Let (true, func.name, List.map mk_raw arg_names, add_try body_expr arg_exprs, None);;


let compile_rules db rules =
  let add_global_extra f =
    let add cond extra v = if cond then add_extra extra v else extra in
    let extra = add !generate_call_counters f.extra Extra_counter in
    { f with extra = extra } 
  in
  let get_extra_exprs fs =
    let get_extra f es extra =
      match extra with
      | Extra_counter ->
        let e = mk_let (Format.sprintf "counter_%s" f.name, 
                        App (Raw "create_counter", String f.name)) in
        e :: es
      | Extra_memo ->
        let e = mk_let (Format.sprintf "memo_%s" f.name,
                        App (Raw "create_memo", String f.name)) in
        e :: es in
    let iterate es f = List.fold_left (get_extra f) es f.extra in
    List.fold_left iterate [] fs 
  in
  let max_index name =
    flat (map (fun rule -> rule.rewrites) rules)
      |> List.filter (fun r -> r.thm_name = name)
      |> List.fold_left (fun m r -> max m r.thm_index) 0 
  in
  let rule_of_th_name th_name =
    let test_rule r = can (find (fun rw -> rw.thm_name = th_name)) r.rewrites in
    find test_rule rules
  in
  let get_type_inst_const th_name =
    try (rule_of_th_name th_name).type_inst_const
    with _ -> None
  in
  let get_th_expr name =
    let n = max_index name in
    let th_expr = 
      let e1 = App (Raw "split_thm", Raw name) in
      let e2 =
        match get_type_inst_const name with
        | None -> e1
        | Some tm -> mk_app (Raw "inst_type_thms", [Term tm; e1]) in
      mk_app (Raw "map", [Raw "standardize"; e2]) in
    let names = enum_names (name ^ "_case") n in
    let pat_names = enum_names "th" n in
    mk_let (String.concat ", " names,
      Match (th_expr,
        [Raw ("[" ^ String.concat "; " pat_names ^ "]"), mk_tuple (List.map mk_raw pat_names);
         Raw "_", Raw "failwith \"error\""])) 
  in
  let get_var_expr (tm, var_name) =
    let name, ty = dest_var tm in
    let ty_str = Format.sprintf "`:%s`" (string_of_type ty) in
    mk_let (var_name, 
      App (Raw "standardize_tm", 
        App (Raw "mk_var", mk_tuple [String name; Raw ty_str])))
  in
  let get_abs_expr (abs_tm, (_, (abs_rw: db_rec), base_tm, base_name)) =
    let args, _ = strip_gabs abs_tm in
    let path = find_full_path ((=) abs_tm) base_tm in
    let eq_expr = App (Raw "standardize", App (Raw "GEN_BETAS_CONV", Raw "abs_tm")) in
    let def_expr =
      mk_let ~body:(Some eq_expr) ("abs_tm",
        App (Raw "list_mk_comb", 
          mk_tuple [mk_app (Raw "follow_full_path", [String path; App (Raw "concl", Raw base_name)]);
                    App (Raw (Format.sprintf "map (C follow_full_path (concl %s))" base_name),
                         mk_list (map (fun tm -> String (find_full_path ((=) tm) base_tm)) args))])) in
    mk_let (abs_rw.f_name ^ "_th", def_expr) 
  in
  let get_poly_indices case =
    (* TODO: find a minimal cover of all type variables *)
    List.mapi (fun i (_, t) -> i, t) case.args
    |> List.filter (fun (i, t) -> get_type_vars t <> [])
    |> List.map fst 
  in
  let get_arg_types_expr func =
    let case1 = hd func.cases in
    let base_args_expr = mk_let ("_, args",
      Raw (Format.sprintf "strip_comb_gabs (fst (dest_eq (concl %s)))" case1.th_name)) in
    let fixed_args_expr =
      let list_expr = 
        mk_list (map (fun tm ->
          let path = find_full_path ((=) tm) case1.rhs_tm in
          mk_app (Raw "follow_full_path", 
            [String path; Raw (Format.sprintf "(rand (concl %s))" case1.th_name)]))
          func.fixed_args) in
      mk_let ("fixed_args", list_expr) in
    let e2 = App (Raw "map (fun i -> type_of (el i (fixed_args @ args)))", mk_int_list func.poly_indices) in
    mk_let (func.arg_ty_name, chain_let [base_args_expr; fixed_args_expr; e2]) 
  in
  let name_vars vars =
    (* TODO: consider types if names coincide *)
    map (fun v -> v, "var_" ^ fst (dest_var v)) vars 
  in
  let vars' = map (fun rule -> map (fun r -> r.fv) rule.rewrites |> flat) rules 
              |> flat |> setify in
  let vars = name_vars vars' in
  let get_case abs rw =
    let rhs = (snd o dest_eq o concl) rw.thm in
    let th_name = Format.sprintf "%s_case%d" rw.thm_name rw.thm_index in
    let eval_tree =
      try build_eval_tree db rhs |> optimize_eval_tree
      with Failure msg ->
        failwith (Format.sprintf "Case %s: %s" th_name msg) in
    let eval_tree, abs = extract_abs abs (concl rw.thm, th_name) eval_tree in
    let case = {
      vars = map (fun tm -> find (fun (tm2, _) -> tm = tm2) vars) rw.fv;
      rhs = eval_tree;
      args = zip rw.args rw.arg_types;
      th_name = th_name;
      rhs_tm = rhs;
    } in
    case, abs 
  in
  let get_abs_case vars (abs_tm, (abs_body, (abs_rw: db_rec), _, _)) =
    let base_args, body_tm = strip_gabs abs_tm in
    let fixed_args = frees abs_tm in
    let args = fixed_args @ base_args in
    let fv, pats = check_args_form args in {
      vars = map (fun tm -> find (fun (tm2, _) -> tm = tm2) vars) fv;
      rhs = abs_body;
      args = map2 (fun pat arg -> pat, get_type arg) pats args;
      th_name = abs_rw.f_name ^ "_th";
      (* TODO: should be the same as the rhs of the corresponding abs_th;
               it is better to use this theorem here *)
      rhs_tm = body_tm;
    } 
  in
  let all_cases abs (rule: db_rec) =
    List.fold_left (fun (abs, cases) rw ->
      let case, abs = get_case abs rw in
      (abs, case :: cases)) (abs, []) rule.rewrites 
  in
  let abs, fs = List.fold_left (fun (abs, fs) rule ->
    let abs, cases = all_cases abs rule in
    let f = {
      name = rule.f_name;
      arg_types = map snd (hd cases).args;
      fixed_args = [];
      poly_indices = get_poly_indices (hd cases);
      arg_ty_name = Format.sprintf "ty_%s" rule.f_name;
      extra = rule.extra;
      cases = cases;
    } in
    abs, f :: fs) ((0, []), []) rules 
  in
  (* Add free variables from abstractions *)
  let vars' = vars' @ 
    flat (map (fun tm, _ ->
      let args, _ = strip_gabs tm in
      flat (map frees args)) (snd abs)) |> setify in
  let vars = name_vars vars' in
  let th_exprs =
    flat (map (fun rule -> rule.rewrites) rules)
      |> map (fun rw -> rw.thm_name)
      |> setify
      |> map get_th_expr in
  let var_exprs = 
    vars |> filter (fun (v, _) -> tyvars (type_of v) = [])
         |> map get_var_expr in
  let abs_th_exprs = map get_abs_expr (snd abs) in
  let abs_fs = map (fun (abs_tm, (_, (abs_rw: db_rec), _, _)) as abs ->
    let abs_case = get_abs_case vars abs in
    let name = abs_rw.f_name in {
      name = name;
      arg_types = map snd abs_case.args;
      fixed_args = frees abs_tm;
      poly_indices = get_poly_indices abs_case;
      arg_ty_name = Format.sprintf "ty_%s" name;
      extra = abs_rw.extra;
      cases = [abs_case];
    }) (snd abs) in
  let ty_exprs =
    filter (fun f -> f.poly_indices <> []) (abs_fs @ fs)
    |> map get_arg_types_expr in
  let f_names = map (fun f -> f.name) fs in
  let fs = List.map add_global_extra fs in
  let extra_exprs = get_extra_exprs fs in
  let f_exprs = map compile_function (abs_fs @ fs) in
  let result_expr = mk_tuple (map mk_raw f_names) in
  let main_expr =
    let prelude = th_exprs @ var_exprs @ abs_th_exprs @ ty_exprs @ extra_exprs in
    let f_expr = if List.length f_exprs > 1 then mk_let_and f_exprs else hd f_exprs in
    chain_let (prelude @ [f_expr; result_expr]) in
  mk_let (String.concat ", " f_names, main_expr);;


let compile_term db f_name tm =
  let get_var_expr (tm, var_name) =
    let name, ty = dest_var tm in
    let ty_str = Format.sprintf "`:%s`" (string_of_type ty) in
    mk_let (var_name, 
      App (Raw "standardize_tm", 
        App (Raw "mk_var", mk_tuple [String name; Raw ty_str]))) in
  let get_tm_expr tm =
    let ty = type_of tm in
    App (Raw "parse_term", 
      String (Format.sprintf "(%s):%s" (string_of_term tm) (string_of_type ty))) in
  let get_abs_expr (abs_tm, (_, (abs_rw: db_rec), base_tm, base_name)) =
    let args, _ = strip_gabs abs_tm in
    let path = find_full_path ((=) abs_tm) base_tm in
    let eq_expr = App (Raw "standardize", App (Raw "GEN_BETAS_CONV", Raw "abs_tm")) in
    let def_expr =
      mk_let ~body:(Some eq_expr) ("abs_tm",
        App (Raw "list_mk_comb", 
          mk_tuple [mk_app (Raw "follow_full_path", [String path; Raw base_name]);
                    mk_list (map get_tm_expr args)])) in
    mk_let (abs_rw.f_name ^ "_th", def_expr) in
  let get_abs_case vars (abs_tm, (abs_body, (abs_rw: db_rec), _, _)) =
    let base_args, body_tm = strip_gabs abs_tm in
    let fixed_args = frees abs_tm in
    let args = fixed_args @ base_args in
    let fv, pats = check_args_form args in {
      vars = map (fun tm -> find (fun (tm2, _) -> tm = tm2) vars) fv;
      rhs = abs_body;
      args = map2 (fun pat arg -> pat, get_type arg) pats args;
      th_name = abs_rw.f_name ^ "_th";
      (* TODO: should be the same as the rhs of the corresponding abs_th;
               it is better to use this theorem here *)
      rhs_tm = body_tm;
    } in
  let eval_tree = build_eval_tree db tm |> optimize_eval_tree in
  let eval_tree, (_, abs) = extract_abs (0, []) (tm, "tm") eval_tree in
  let vars' = map (fun tm, _ ->
                    let args, _ = strip_gabs tm in
                    flat (map frees args)) abs 
      |> flat |> setify in
  let vars = map (fun v -> v, fst (dest_var v) ^ "_var") vars' in
  let var_exprs = map get_var_expr vars in
  let abs_th_exprs = map get_abs_expr abs in
  let abs_exprs = map (fun (_, (_, (abs_rw: db_rec), _, _)) as abs ->
    let abs_case = get_abs_case vars abs in
    let abs_f = {
      name = abs_rw.f_name;
      arg_types = map snd abs_case.args;
      fixed_args = [];
      poly_indices = [];
      arg_ty_name = "";
      extra = abs_rw.extra;
      cases = [abs_case];
    } in
    compile_function abs_f) abs in
  let tm_expr = mk_let ("tm", Term tm) in
  let expr = compile_eval_tree "tm" eval_tree in
  mk_let (f_name,
    chain_let (tm_expr :: abs_th_exprs @ var_exprs @ abs_exprs @ [expr]));;


let print_rules db fmt ?term rules =
  let exprs' = map (compile_rules db) rules in
  let exprs =
    match term with
    | None -> exprs'
    | Some tm -> exprs' @ [compile_term db "result" tm] in
  let sep fmt () = Format.fprintf fmt ";;@,@," in
  Format.fprintf fmt "@[<v>%a;;@]@."
    (Format.pp_print_list ~pp_sep:sep print_expr) exprs;;

let write_rules db ?(margin = 200) ?term fname rules =
  let oc = open_out fname in
  try
    let fmt = Format.formatter_of_out_channel oc in
    Format.pp_set_margin fmt margin;
    print_rules db fmt ?term rules;
    Format.pp_print_flush fmt ();
    close_out oc
  with e ->
    close_out_noerr oc;
    raise e;;

let write_rules_names db ?margin ?term fname names =
  get_entries db names
    |> List.map (fun r -> [r])
    |> write_rules db ?margin ?term fname;;

let write_rules_consts db ?margin ?term fname consts =
  List.map (List.map (find_exact_entry db)) consts
    |> write_rules db ?margin ?term fname;;